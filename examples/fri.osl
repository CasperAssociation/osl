-- A verifier for a simple version of FRI.

def codewordLength : N := 256N.

data F ~= Fin(270497897142230380135924736767050121217).

def zero : F := to(F)(fin(0)).
def one : F := to(F)(fin(1)).

def cardinality : N := 270497897142230380135924736767050121217N.

def generator : F := to(F)(fin(85408008396924667383611388730472331217)).

def toN : F -> N
  := \x : F => cast(from(F)(x)).

def add : F -> F -> F -> Prop
  := \a : F => \b : F => \c : F
  => some d : N < cardinality,
     (toN(a) +N toN(b)) = (toN(c) +N (cardinality *N d)).

def mul : F -> F -> F -> Prop
  := \a : F => \b : F => \c : F
  => some d : N < cardinality,
     (toN(a) *N toN(b)) = (toN(c) +N (cardinality *N d)).

def negate : F -> F -> Prop
  := \a : F => \b : F
  => add(a, b, zero).

def combine1 : (F * F) -> (F * F) -> Prop
  := \x : (F * F) => \y : (F * F)
  => some negX2 : F,
     negate(pi2(x), negX2)
   & add(pi1(x), pi2(x), pi1(y))
   & add(pi1(x), negX2, pi2(y)).

def combine : F -> (F * F) -> (F * F) -> Prop
  := \omega : F => \x : (F * F) => \y : (F * F)
  => some x2Omega : F, some negX2Omega : F,
     mul(omega, pi2(x), x2Omega)
   & negate(x2Omega, negX2Omega)
   & add(pi1(x), x2Omega, pi1(y))
   & add(pi1(x), negX2Omega, pi2(y)).

def fft2 : (Fin(2) -> F) -> (Fin(2) -> F) -> Prop
  := \xs : Fin(2) -> F => \ys : Fin(2) -> F
  => combine1((xs(fin(0)), xs(fin(1))), (ys(fin(0)), ys(fin(1)))).

def fft4 : (Fin(4) -> F) -> (Fin(4) -> F) -> Prop
  := \xs : Fin(4) -> F => \ys : Fin(4) -> F
  => let omega : F := to(F)(fin(259052015163170058651980223774986375587));
     some ys0 : Fin(2) ->^2 F,
     some ys1 : Fin(2) ->^2 F,
     let xs0 : Fin(2) -> F := \i : Fin(2) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(2) -> F := \i : Fin(2) => xs(cast((2N *N cast(i)) +N 1N));
     fft2(xs0, ys0) & fft2(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(2))))
   & combine(omega, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(3)))).

def fft8 : (Fin(8) -> F) -> (Fin(8) -> F) -> Prop
  := \xs : Fin(8) -> F => \ys : Fin(8) -> F
  => let omega : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega2 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega3 : F := to(F)(fin(94118632892422173191291920064315934488));
     some ys0 : Fin(4) ->^4 F,
     some ys1 : Fin(4) ->^4 F,
     let xs0 : Fin(4) -> F := \i : Fin(4) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(4) -> F := \i : Fin(4) => xs(cast((2N *N cast(i)) +N 1N));
     fft4(xs0, ys0) & fft4(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(4))))
   & combine(omega, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(5))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(6))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(7)))).

def fft16 : (Fin(16) -> F) -> (Fin(16) -> F) -> Prop
  := \xs : Fin(16) -> F => \ys : Fin(16) -> F
  => let omega : F := to(F)(fin(22186728119017901039385635608201850931));
     let omega2 : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega3 : F := to(F)(fin(73231901677283077325882091713770153990));
     let omega4 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega5 : F := to(F)(fin(266437655688779403589114768359918648781));
     let omega6 : F := to(F)(fin(94118632892422173191291920064315934488));
     let omega7 : F := to(F)(fin(196366951967922674545239204167809605584));
     some ys0 : Fin(8) ->^8 F,
     some ys1 : Fin(8) ->^8 F,
     let xs0 : Fin(8) -> F := \i : Fin(8) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(8) -> F := \i : Fin(8) => xs(cast((2N *N cast(i)) +N 1N));
     fft8(xs0, ys0) & fft8(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(8))))
   & combine(omega, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(9))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(10))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(11))))
   & combine(omega4, (ys0(fin(4)), ys1(fin(4))), (ys(fin(4)), ys(fin(12))))
   & combine(omega5, (ys0(fin(5)), ys1(fin(5))), (ys(fin(5)), ys(fin(13))))
   & combine(omega6, (ys0(fin(6)), ys1(fin(6))), (ys(fin(6)), ys(fin(14))))
   & combine(omega7, (ys0(fin(7)), ys1(fin(7))), (ys(fin(7)), ys(fin(15)))).

def fft32 : (Fin(32) -> F) -> (Fin(32) -> F) -> Prop
  := \xs : Fin(32) -> F => \ys : Fin(32) -> F
  => let omega1 : F := to(F)(fin(16698199167658661640320272194027702370));
     let omega2 : F := to(F)(fin(22186728119017901039385635608201850931));
     let omega3 : F := to(F)(fin(34350062198098277421132970135534305821));
     let omega4 : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega5 : F := to(F)(fin(107125704632455286753154574269440354274));
     let omega6 : F := to(F)(fin(73231901677283077325882091713770153990));
     let omega7 : F := to(F)(fin(90374378160636663023428487766167913148));
     let omega8 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega9 : F := to(F)(fin(162806147425635384733525067434736806136));
     let omega10 : F := to(F)(fin(266437655688779403589114768359918648781));
     let omega11 : F := to(F)(fin(144022985169312756131804347043517484647));
     let omega12 : F := to(F)(fin(94118632892422173191291920064315934488));
     let omega13 : F := to(F)(fin(90666895636146090046074637791036353677));
     let omega14 : F := to(F)(fin(196366951967922674545239204167809605584));
     let omega15 : F := to(F)(fin(227466907842111639850817356847064975718));
     some ys0 : Fin(16) ->^16 F,
     some ys1 : Fin(16) ->^16 F,
     let xs0 : Fin(16) -> F := \i : Fin(16) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(16) -> F := \i : Fin(16) => xs(cast((2N *N cast(i)) +N 1N));
     fft16(xs0, ys) & fft16(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(16))))
   & combine(omega1, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(17))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(18))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(19))))
   & combine(omega4, (ys0(fin(4)), ys1(fin(4))), (ys(fin(4)), ys(fin(20))))
   & combine(omega5, (ys0(fin(5)), ys1(fin(5))), (ys(fin(5)), ys(fin(21))))
   & combine(omega6, (ys0(fin(6)), ys1(fin(6))), (ys(fin(6)), ys(fin(22))))
   & combine(omega7, (ys0(fin(7)), ys1(fin(7))), (ys(fin(7)), ys(fin(23))))
   & combine(omega8, (ys0(fin(8)), ys1(fin(8))), (ys(fin(8)), ys(fin(24))))
   & combine(omega9, (ys0(fin(9)), ys1(fin(9))), (ys(fin(9)), ys(fin(25))))
   & combine(omega10, (ys0(fin(10)), ys1(fin(10))), (ys(fin(10)), ys(fin(26))))
   & combine(omega11, (ys0(fin(11)), ys1(fin(11))), (ys(fin(11)), ys(fin(27))))
   & combine(omega12, (ys0(fin(12)), ys1(fin(12))), (ys(fin(12)), ys(fin(28))))
   & combine(omega13, (ys0(fin(13)), ys1(fin(13))), (ys(fin(13)), ys(fin(29))))
   & combine(omega14, (ys0(fin(14)), ys1(fin(14))), (ys(fin(14)), ys(fin(30))))
   & combine(omega15, (ys0(fin(15)), ys1(fin(15))), (ys(fin(15)), ys(fin(31)))).


def fft64 : (Fin(64) -> F) -> (Fin(64) -> F) -> Prop
  := \xs : Fin(64) -> F => \ys : Fin(64) -> F
  => let omega1 : F := to(F)(fin(59478736836296470922896375673044043947));
     let omega2 : F := to(F)(fin(16698199167658661640320272194027702370));
     let omega3 : F := to(F)(fin(230239576433093401532832293097799987081));
     let omega4 : F := to(F)(fin(22186728119017901039385635608201850931));
     let omega5 : F := to(F)(fin(66082323163859804339774168672220475012));
     let omega6 : F := to(F)(fin(34350062198098277421132970135534305821));
     let omega7 : F := to(F)(fin(53975102611463661700300295131436589811));
     let omega8 : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega9 : F := to(F)(fin(181780365704469330345834104632378070880));
     let omega10 : F := to(F)(fin(107125704632455286753154574269440354274));
     let omega11 : F := to(F)(fin(175748425828701265334841538845137933816));
     let omega12 : F := to(F)(fin(73231901677283077325882091713770153990));
     let omega13 : F := to(F)(fin(88860983738059218942568320754437614996));
     let omega14 : F := to(F)(fin(90374378160636663023428487766167913148));
     let omega15 : F := to(F)(fin(98444187387640850276152309454388340014));
     let omega16 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega17 : F := to(F)(fin(100703521582087853386340341793494523820));
     let omega18 : F := to(F)(fin(162806147425635384733525067434736806136));
     let omega19 : F := to(F)(fin(137011298098866627214397059271234920884));
     let omega20 : F := to(F)(fin(266437655688779403589114768359918648781));
     let omega21 : F := to(F)(fin(167518099136818620742107111461969078554));
     let omega22 : F := to(F)(fin(144022985169312756131804347043517484647));
     let omega23 : F := to(F)(fin(173027906138811040234738490632352065247));
     let omega24 : F := to(F)(fin(94118632892422173191291920064315934488));
     let omega25 : F := to(F)(fin(266218309391531664192048397095017306631));
     let omega26 : F := to(F)(fin(90666895636146090046074637791036353677));
     let omega27 : F := to(F)(fin(160023194695147206377062539534574021330));
     let omega28 : F := to(F)(fin(196366951967922674545239204167809605584));
     let omega29 : F := to(F)(fin(209738890145307597667055477969839115273));
     let omega30 : F := to(F)(fin(227466907842111639850817356847064975718));
     let omega31 : F := to(F)(fin(126268713548946527012676081801390371621));
     some ys0 : Fin(32) ->^32 F,
     some ys1 : Fin(32) ->^32 F,
     let xs0 : Fin(32) -> F := \i : Fin(32) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(32) -> F := \i : Fin(32) => xs(cast((2N *N cast(i)) +N 1N));
     fft32(xs0, ys) & fft32(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(32))))
   & combine(omega1, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(33))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(34))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(35))))
   & combine(omega4, (ys0(fin(4)), ys1(fin(4))), (ys(fin(4)), ys(fin(36))))
   & combine(omega5, (ys0(fin(5)), ys1(fin(5))), (ys(fin(5)), ys(fin(37))))
   & combine(omega6, (ys0(fin(6)), ys1(fin(6))), (ys(fin(6)), ys(fin(38))))
   & combine(omega7, (ys0(fin(7)), ys1(fin(7))), (ys(fin(7)), ys(fin(39))))
   & combine(omega8, (ys0(fin(8)), ys1(fin(8))), (ys(fin(8)), ys(fin(40))))
   & combine(omega9, (ys0(fin(9)), ys1(fin(9))), (ys(fin(9)), ys(fin(41))))
   & combine(omega10, (ys0(fin(10)), ys1(fin(10))), (ys(fin(10)), ys(fin(42))))
   & combine(omega11, (ys0(fin(11)), ys1(fin(11))), (ys(fin(11)), ys(fin(43))))
   & combine(omega12, (ys0(fin(12)), ys1(fin(12))), (ys(fin(12)), ys(fin(44))))
   & combine(omega13, (ys0(fin(13)), ys1(fin(13))), (ys(fin(13)), ys(fin(45))))
   & combine(omega14, (ys0(fin(14)), ys1(fin(14))), (ys(fin(14)), ys(fin(46))))
   & combine(omega15, (ys0(fin(15)), ys1(fin(15))), (ys(fin(15)), ys(fin(47))))
   & combine(omega16, (ys0(fin(16)), ys1(fin(16))), (ys(fin(16)), ys(fin(48))))
   & combine(omega17, (ys0(fin(17)), ys1(fin(17))), (ys(fin(17)), ys(fin(49))))
   & combine(omega18, (ys0(fin(18)), ys1(fin(18))), (ys(fin(18)), ys(fin(50))))
   & combine(omega19, (ys0(fin(19)), ys1(fin(19))), (ys(fin(19)), ys(fin(51))))
   & combine(omega20, (ys0(fin(20)), ys1(fin(20))), (ys(fin(20)), ys(fin(52))))
   & combine(omega21, (ys0(fin(21)), ys1(fin(21))), (ys(fin(21)), ys(fin(53))))
   & combine(omega22, (ys0(fin(22)), ys1(fin(22))), (ys(fin(22)), ys(fin(54))))
   & combine(omega23, (ys0(fin(23)), ys1(fin(23))), (ys(fin(23)), ys(fin(55))))
   & combine(omega24, (ys0(fin(24)), ys1(fin(24))), (ys(fin(24)), ys(fin(56))))
   & combine(omega25, (ys0(fin(25)), ys1(fin(25))), (ys(fin(25)), ys(fin(57))))
   & combine(omega26, (ys0(fin(26)), ys1(fin(26))), (ys(fin(26)), ys(fin(58))))
   & combine(omega27, (ys0(fin(27)), ys1(fin(27))), (ys(fin(27)), ys(fin(59))))
   & combine(omega28, (ys0(fin(28)), ys1(fin(28))), (ys(fin(28)), ys(fin(60))))
   & combine(omega29, (ys0(fin(29)), ys1(fin(29))), (ys(fin(29)), ys(fin(61))))
   & combine(omega30, (ys0(fin(30)), ys1(fin(30))), (ys(fin(30)), ys(fin(62))))
   & combine(omega31, (ys0(fin(31)), ys1(fin(31))), (ys(fin(31)), ys(fin(63)))).
