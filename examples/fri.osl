-- A verifier for a simple version of FRI.

def codewordLength : N := 256N.

data F ~= Fin(270497897142230380135924736767050121217).

def zero : F := to(F)(fin(0)).
def one : F := to(F)(fin(1)).

def cardinality : N := 270497897142230380135924736767050121217N.

def generator : F := to(F)(fin(85408008396924667383611388730472331217)).

def toN : F -> N
  := \x : F => cast(from(F)(x)).

def add : F -> F -> F -> Prop
  := \a : F => \b : F => \c : F
  => some d : N < cardinality,
     (toN(a) +N toN(b)) = (toN(c) +N (cardinality *N d)).

def mul : F -> F -> F -> Prop
  := \a : F => \b : F => \c : F
  => some d : N < cardinality,
     (toN(a) *N toN(b)) = (toN(c) +N (cardinality *N d)).

def negate : F -> F -> Prop
  := \a : F => \b : F
  => add(a, b, zero).

def fft2 : (Fin(2) -> F) -> (Fin(2) -> F) -> Prop
  := \xs : Fin(2) -> F => \ys : Fin(2) -> F
  => let omega : F := to(F)(fin(270497897142230380135924736767050121216));
     some a : F, some b : F,
     mul(xs(fin(1)), omega, a)
   & negate(a, b)
   & add(a, xs(fin(0)), ys(fin(0)))
   & add(b, xs(fin(0)), ys(fin(1))).
