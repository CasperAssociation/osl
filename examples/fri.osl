-- A verifier for a simple version of FRI.

-- Finite field

data F ~= Fin(270497897142230380135924736767050121217).

def zero : F := to(F)(fin(0)).
def one : F := to(F)(fin(1)).

def cardinality : N := 270497897142230380135924736767050121217N.

def toN : F -> N
  := \x : F => cast(from(F)(x)).

def add : F -> F -> F -> Prop
  := \a : F => \b : F => \c : F
  => some d : N < cardinality,
     (toN(a) +N toN(b)) = (toN(c) +N (cardinality *N d)).

def mul : F -> F -> F -> Prop
  := \a : F => \b : F => \c : F
  => some d : N < cardinality,
     (toN(a) *N toN(b)) = (toN(c) +N (cardinality *N d)).

def negate : F -> F -> Prop
  := \a : F => \b : F
  => add(a, b, zero).

-- FFT

def combine1 : (F * F) -> (F * F) -> Prop
  := \x : (F * F) => \y : (F * F)
  => some negX2 : F,
     negate(pi2(x), negX2)
   & add(pi1(x), pi2(x), pi1(y))
   & add(pi1(x), negX2, pi2(y)).

def combine : F -> (F * F) -> (F * F) -> Prop
  := \omega : F => \x : (F * F) => \y : (F * F)
  => some x2Omega : F, some negX2Omega : F,
     mul(omega, pi2(x), x2Omega)
   & negate(x2Omega, negX2Omega)
   & add(pi1(x), x2Omega, pi1(y))
   & add(pi1(x), negX2Omega, pi2(y)).

def fft2 : (Fin(2) -> F) -> (Fin(2) -> F) -> Prop
  := \xs : Fin(2) -> F => \ys : Fin(2) -> F
  => combine1((xs(fin(0)), xs(fin(1))), (ys(fin(0)), ys(fin(1)))).

def fft4 : (Fin(4) -> F) -> (Fin(4) -> F) -> Prop
  := \xs : Fin(4) -> F => \ys : Fin(4) -> F
  => let omega : F := to(F)(fin(259052015163170058651980223774986375587));
     some ys0 : Fin(2) ->^2 F,
     some ys1 : Fin(2) ->^2 F,
     let xs0 : Fin(2) -> F := \i : Fin(2) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(2) -> F := \i : Fin(2) => xs(cast((2N *N cast(i)) +N 1N));
     fft2(xs0, ys0) & fft2(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(2))))
   & combine(omega, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(3)))).

def fft8 : (Fin(8) -> F) -> (Fin(8) -> F) -> Prop
  := \xs : Fin(8) -> F => \ys : Fin(8) -> F
  => let omega : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega2 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega3 : F := to(F)(fin(94118632892422173191291920064315934488));
     some ys0 : Fin(4) ->^4 F,
     some ys1 : Fin(4) ->^4 F,
     let xs0 : Fin(4) -> F := \i : Fin(4) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(4) -> F := \i : Fin(4) => xs(cast((2N *N cast(i)) +N 1N));
     fft4(xs0, ys0) & fft4(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(4))))
   & combine(omega, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(5))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(6))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(7)))).

def fft16 : (Fin(16) -> F) -> (Fin(16) -> F) -> Prop
  := \xs : Fin(16) -> F => \ys : Fin(16) -> F
  => let omega : F := to(F)(fin(22186728119017901039385635608201850931));
     let omega2 : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega3 : F := to(F)(fin(73231901677283077325882091713770153990));
     let omega4 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega5 : F := to(F)(fin(266437655688779403589114768359918648781));
     let omega6 : F := to(F)(fin(94118632892422173191291920064315934488));
     let omega7 : F := to(F)(fin(196366951967922674545239204167809605584));
     some ys0 : Fin(8) ->^8 F,
     some ys1 : Fin(8) ->^8 F,
     let xs0 : Fin(8) -> F := \i : Fin(8) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(8) -> F := \i : Fin(8) => xs(cast((2N *N cast(i)) +N 1N));
     fft8(xs0, ys0) & fft8(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(8))))
   & combine(omega, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(9))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(10))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(11))))
   & combine(omega4, (ys0(fin(4)), ys1(fin(4))), (ys(fin(4)), ys(fin(12))))
   & combine(omega5, (ys0(fin(5)), ys1(fin(5))), (ys(fin(5)), ys(fin(13))))
   & combine(omega6, (ys0(fin(6)), ys1(fin(6))), (ys(fin(6)), ys(fin(14))))
   & combine(omega7, (ys0(fin(7)), ys1(fin(7))), (ys(fin(7)), ys(fin(15)))).

def fft32 : (Fin(32) -> F) -> (Fin(32) -> F) -> Prop
  := \xs : Fin(32) -> F => \ys : Fin(32) -> F
  => let omega1 : F := to(F)(fin(16698199167658661640320272194027702370));
     let omega2 : F := to(F)(fin(22186728119017901039385635608201850931));
     let omega3 : F := to(F)(fin(34350062198098277421132970135534305821));
     let omega4 : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega5 : F := to(F)(fin(107125704632455286753154574269440354274));
     let omega6 : F := to(F)(fin(73231901677283077325882091713770153990));
     let omega7 : F := to(F)(fin(90374378160636663023428487766167913148));
     let omega8 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega9 : F := to(F)(fin(162806147425635384733525067434736806136));
     let omega10 : F := to(F)(fin(266437655688779403589114768359918648781));
     let omega11 : F := to(F)(fin(144022985169312756131804347043517484647));
     let omega12 : F := to(F)(fin(94118632892422173191291920064315934488));
     let omega13 : F := to(F)(fin(90666895636146090046074637791036353677));
     let omega14 : F := to(F)(fin(196366951967922674545239204167809605584));
     let omega15 : F := to(F)(fin(227466907842111639850817356847064975718));
     some ys0 : Fin(16) ->^16 F,
     some ys1 : Fin(16) ->^16 F,
     let xs0 : Fin(16) -> F := \i : Fin(16) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(16) -> F := \i : Fin(16) => xs(cast((2N *N cast(i)) +N 1N));
     fft16(xs0, ys) & fft16(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(16))))
   & combine(omega1, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(17))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(18))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(19))))
   & combine(omega4, (ys0(fin(4)), ys1(fin(4))), (ys(fin(4)), ys(fin(20))))
   & combine(omega5, (ys0(fin(5)), ys1(fin(5))), (ys(fin(5)), ys(fin(21))))
   & combine(omega6, (ys0(fin(6)), ys1(fin(6))), (ys(fin(6)), ys(fin(22))))
   & combine(omega7, (ys0(fin(7)), ys1(fin(7))), (ys(fin(7)), ys(fin(23))))
   & combine(omega8, (ys0(fin(8)), ys1(fin(8))), (ys(fin(8)), ys(fin(24))))
   & combine(omega9, (ys0(fin(9)), ys1(fin(9))), (ys(fin(9)), ys(fin(25))))
   & combine(omega10, (ys0(fin(10)), ys1(fin(10))), (ys(fin(10)), ys(fin(26))))
   & combine(omega11, (ys0(fin(11)), ys1(fin(11))), (ys(fin(11)), ys(fin(27))))
   & combine(omega12, (ys0(fin(12)), ys1(fin(12))), (ys(fin(12)), ys(fin(28))))
   & combine(omega13, (ys0(fin(13)), ys1(fin(13))), (ys(fin(13)), ys(fin(29))))
   & combine(omega14, (ys0(fin(14)), ys1(fin(14))), (ys(fin(14)), ys(fin(30))))
   & combine(omega15, (ys0(fin(15)), ys1(fin(15))), (ys(fin(15)), ys(fin(31)))).


def fft64 : (Fin(64) -> F) -> (Fin(64) -> F) -> Prop
  := \xs : Fin(64) -> F => \ys : Fin(64) -> F
  => let omega1 : F := to(F)(fin(59478736836296470922896375673044043947));
     let omega2 : F := to(F)(fin(16698199167658661640320272194027702370));
     let omega3 : F := to(F)(fin(230239576433093401532832293097799987081));
     let omega4 : F := to(F)(fin(22186728119017901039385635608201850931));
     let omega5 : F := to(F)(fin(66082323163859804339774168672220475012));
     let omega6 : F := to(F)(fin(34350062198098277421132970135534305821));
     let omega7 : F := to(F)(fin(53975102611463661700300295131436589811));
     let omega8 : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega9 : F := to(F)(fin(181780365704469330345834104632378070880));
     let omega10 : F := to(F)(fin(107125704632455286753154574269440354274));
     let omega11 : F := to(F)(fin(175748425828701265334841538845137933816));
     let omega12 : F := to(F)(fin(73231901677283077325882091713770153990));
     let omega13 : F := to(F)(fin(88860983738059218942568320754437614996));
     let omega14 : F := to(F)(fin(90374378160636663023428487766167913148));
     let omega15 : F := to(F)(fin(98444187387640850276152309454388340014));
     let omega16 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega17 : F := to(F)(fin(100703521582087853386340341793494523820));
     let omega18 : F := to(F)(fin(162806147425635384733525067434736806136));
     let omega19 : F := to(F)(fin(137011298098866627214397059271234920884));
     let omega20 : F := to(F)(fin(266437655688779403589114768359918648781));
     let omega21 : F := to(F)(fin(167518099136818620742107111461969078554));
     let omega22 : F := to(F)(fin(144022985169312756131804347043517484647));
     let omega23 : F := to(F)(fin(173027906138811040234738490632352065247));
     let omega24 : F := to(F)(fin(94118632892422173191291920064315934488));
     let omega25 : F := to(F)(fin(266218309391531664192048397095017306631));
     let omega26 : F := to(F)(fin(90666895636146090046074637791036353677));
     let omega27 : F := to(F)(fin(160023194695147206377062539534574021330));
     let omega28 : F := to(F)(fin(196366951967922674545239204167809605584));
     let omega29 : F := to(F)(fin(209738890145307597667055477969839115273));
     let omega30 : F := to(F)(fin(227466907842111639850817356847064975718));
     let omega31 : F := to(F)(fin(126268713548946527012676081801390371621));
     some ys0 : Fin(32) ->^32 F,
     some ys1 : Fin(32) ->^32 F,
     let xs0 : Fin(32) -> F := \i : Fin(32) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(32) -> F := \i : Fin(32) => xs(cast((2N *N cast(i)) +N 1N));
     fft32(xs0, ys) & fft32(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(32))))
   & combine(omega1, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(33))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(34))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(35))))
   & combine(omega4, (ys0(fin(4)), ys1(fin(4))), (ys(fin(4)), ys(fin(36))))
   & combine(omega5, (ys0(fin(5)), ys1(fin(5))), (ys(fin(5)), ys(fin(37))))
   & combine(omega6, (ys0(fin(6)), ys1(fin(6))), (ys(fin(6)), ys(fin(38))))
   & combine(omega7, (ys0(fin(7)), ys1(fin(7))), (ys(fin(7)), ys(fin(39))))
   & combine(omega8, (ys0(fin(8)), ys1(fin(8))), (ys(fin(8)), ys(fin(40))))
   & combine(omega9, (ys0(fin(9)), ys1(fin(9))), (ys(fin(9)), ys(fin(41))))
   & combine(omega10, (ys0(fin(10)), ys1(fin(10))), (ys(fin(10)), ys(fin(42))))
   & combine(omega11, (ys0(fin(11)), ys1(fin(11))), (ys(fin(11)), ys(fin(43))))
   & combine(omega12, (ys0(fin(12)), ys1(fin(12))), (ys(fin(12)), ys(fin(44))))
   & combine(omega13, (ys0(fin(13)), ys1(fin(13))), (ys(fin(13)), ys(fin(45))))
   & combine(omega14, (ys0(fin(14)), ys1(fin(14))), (ys(fin(14)), ys(fin(46))))
   & combine(omega15, (ys0(fin(15)), ys1(fin(15))), (ys(fin(15)), ys(fin(47))))
   & combine(omega16, (ys0(fin(16)), ys1(fin(16))), (ys(fin(16)), ys(fin(48))))
   & combine(omega17, (ys0(fin(17)), ys1(fin(17))), (ys(fin(17)), ys(fin(49))))
   & combine(omega18, (ys0(fin(18)), ys1(fin(18))), (ys(fin(18)), ys(fin(50))))
   & combine(omega19, (ys0(fin(19)), ys1(fin(19))), (ys(fin(19)), ys(fin(51))))
   & combine(omega20, (ys0(fin(20)), ys1(fin(20))), (ys(fin(20)), ys(fin(52))))
   & combine(omega21, (ys0(fin(21)), ys1(fin(21))), (ys(fin(21)), ys(fin(53))))
   & combine(omega22, (ys0(fin(22)), ys1(fin(22))), (ys(fin(22)), ys(fin(54))))
   & combine(omega23, (ys0(fin(23)), ys1(fin(23))), (ys(fin(23)), ys(fin(55))))
   & combine(omega24, (ys0(fin(24)), ys1(fin(24))), (ys(fin(24)), ys(fin(56))))
   & combine(omega25, (ys0(fin(25)), ys1(fin(25))), (ys(fin(25)), ys(fin(57))))
   & combine(omega26, (ys0(fin(26)), ys1(fin(26))), (ys(fin(26)), ys(fin(58))))
   & combine(omega27, (ys0(fin(27)), ys1(fin(27))), (ys(fin(27)), ys(fin(59))))
   & combine(omega28, (ys0(fin(28)), ys1(fin(28))), (ys(fin(28)), ys(fin(60))))
   & combine(omega29, (ys0(fin(29)), ys1(fin(29))), (ys(fin(29)), ys(fin(61))))
   & combine(omega30, (ys0(fin(30)), ys1(fin(30))), (ys(fin(30)), ys(fin(62))))
   & combine(omega31, (ys0(fin(31)), ys1(fin(31))), (ys(fin(31)), ys(fin(63)))).

def fft128 : (Fin(128) -> F) -> (Fin(128) -> F) -> Prop
  := \xs : Fin(128) -> F => \ys : Fin(128) -> F
  => let omega1 : F := to(F)(fin(65907963977709178563567092354521124432));
     let omega2 : F := to(F)(fin(59478736836296470922896375673044043947));
     let omega3 : F := to(F)(fin(10080743355633979073980820746207349976));
     let omega4 : F := to(F)(fin(16698199167658661640320272194027702370));
     let omega5 : F := to(F)(fin(155514080029925461915875765689528793011));
     let omega6 : F := to(F)(fin(230239576433093401532832293097799987081));
     let omega7 : F := to(F)(fin(194132420544040598451138094918501362788));
     let omega8 : F := to(F)(fin(22186728119017901039385635608201850931));
     let omega9 : F := to(F)(fin(165171464351728602222496071538917915759));
     let omega10 : F := to(F)(fin(66082323163859804339774168672220475012));
     let omega11 : F := to(F)(fin(52368989022523362401030890040631910589));
     let omega12 : F := to(F)(fin(34350062198098277421132970135534305821));
     let omega13 : F := to(F)(fin(125981173384658672605335060327246825341));
     let omega14 : F := to(F)(fin(53975102611463661700300295131436589811));
     let omega15 : F := to(F)(fin(45731804364596080071742990960990329708));
     let omega16 : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega17 : F := to(F)(fin(646071126513514338479457116666093882));
     let omega18 : F := to(F)(fin(181780365704469330345834104632378070880));
     let omega19 : F := to(F)(fin(55611006669477530418094321149794867386));
     let omega20 : F := to(F)(fin(107125704632455286753154574269440354274));
     let omega21 : F := to(F)(fin(187135511082714768634880684591229128547));
     let omega22 : F := to(F)(fin(175748425828701265334841538845137933816));
     let omega23 : F := to(F)(fin(53496544804274307075856202076079293771));
     let omega24 : F := to(F)(fin(73231901677283077325882091713770153990));
     let omega25 : F := to(F)(fin(108347376047545789579368286899060029778));
     let omega26 : F := to(F)(fin(88860983738059218942568320754437614996));
     let omega27 : F := to(F)(fin(104476918710448136045822974773644103317));
     let omega28 : F := to(F)(fin(90374378160636663023428487766167913148));
     let omega29 : F := to(F)(fin(43929742161450112436869802623156599743));
     let omega30 : F := to(F)(fin(98444187387640850276152309454388340014));
     let omega31 : F := to(F)(fin(196492777263284737445172729740627419842));
     let omega32 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega33 : F := to(F)(fin(145258429125910453228712361680196389420));
     let omega34 : F := to(F)(fin(100703521582087853386340341793494523820));
     let omega35 : F := to(F)(fin(167990255399084614625398011033513433967));
     let omega36 : F := to(F)(fin(162806147425635384733525067434736806136));
     let omega37 : F := to(F)(fin(249804383098053691690433466673672256150));
     let omega38 : F := to(F)(fin(137011298098866627214397059271234920884));
     let omega39 : F := to(F)(fin(22109119444620255491656599370014894118));
     let omega40 : F := to(F)(fin(266437655688779403589114768359918648781));
     let omega41 : F := to(F)(fin(218884243067799520092859976286523983462));
     let omega42 : F := to(F)(fin(167518099136818620742107111461969078554));
     let omega43 : F := to(F)(fin(81221284648176836047816392199558901810));
     let omega44 : F := to(F)(fin(144022985169312756131804347043517484647));
     let omega45 : F := to(F)(fin(127508946414583913393496651359134117178));
     let omega46 : F := to(F)(fin(173027906138811040234738490632352065247));
     let omega47 : F := to(F)(fin(147515479292872070656581089263671104447));
     let omega48 : F := to(F)(fin(94118632892422173191291920064315934488));
     let omega49 : F := to(F)(fin(258631907013871381269861234031607317568));
     let omega50 : F := to(F)(fin(266218309391531664192048397095017306631));
     let omega51 : F := to(F)(fin(105927649836782660661359579301354132376));
     let omega52 : F := to(F)(fin(90666895636146090046074637791036353677));
     let omega53 : F := to(F)(fin(2956470401820075415746174703645418480));
     let omega54 : F := to(F)(fin(160023194695147206377062539534574021330));
     let omega55 : F := to(F)(fin(217783932944107721720455816777548457284));
     let omega56 : F := to(F)(fin(196366951967922674545239204167809605584));
     let omega57 : F := to(F)(fin(198299637922638238992009055366939691179));
     let omega58 : F := to(F)(fin(209738890145307597667055477969839115273));
     let omega59 : F := to(F)(fin(79710547658162008818621698923701135801));
     let omega60 : F := to(F)(fin(227466907842111639850817356847064975718));
     let omega61 : F := to(F)(fin(204262520294779538392537716498324354516));
     let omega62 : F := to(F)(fin(126268713548946527012676081801390371621));
     let omega63 : F := to(F)(fin(256566110679969874514434967353409990301)); 
     some ys0 : Fin(64) ->^64 F,
     some ys1 : Fin(64) ->^64 F,
     let xs0 : Fin(64) -> F := \i : Fin(64) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(64) -> F := \i : Fin(64) => xs(cast((2N *N cast(i)) +N 1N));
     fft64(xs0, ys0) & fft64(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(64))))
   & combine(omega1, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(65))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(66))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(67))))
   & combine(omega4, (ys0(fin(4)), ys1(fin(4))), (ys(fin(4)), ys(fin(68))))
   & combine(omega5, (ys0(fin(5)), ys1(fin(5))), (ys(fin(5)), ys(fin(69))))
   & combine(omega6, (ys0(fin(6)), ys1(fin(6))), (ys(fin(6)), ys(fin(70))))
   & combine(omega7, (ys0(fin(7)), ys1(fin(7))), (ys(fin(7)), ys(fin(71))))
   & combine(omega8, (ys0(fin(8)), ys1(fin(8))), (ys(fin(8)), ys(fin(72))))
   & combine(omega9, (ys0(fin(9)), ys1(fin(9))), (ys(fin(9)), ys(fin(73))))
   & combine(omega10, (ys0(fin(10)), ys1(fin(10))), (ys(fin(10)), ys(fin(74))))
   & combine(omega11, (ys0(fin(11)), ys1(fin(11))), (ys(fin(11)), ys(fin(75))))
   & combine(omega12, (ys0(fin(12)), ys1(fin(12))), (ys(fin(12)), ys(fin(76))))
   & combine(omega13, (ys0(fin(13)), ys1(fin(13))), (ys(fin(13)), ys(fin(77))))
   & combine(omega14, (ys0(fin(14)), ys1(fin(14))), (ys(fin(14)), ys(fin(78))))
   & combine(omega15, (ys0(fin(15)), ys1(fin(15))), (ys(fin(15)), ys(fin(79))))
   & combine(omega16, (ys0(fin(16)), ys1(fin(16))), (ys(fin(16)), ys(fin(80))))
   & combine(omega17, (ys0(fin(17)), ys1(fin(17))), (ys(fin(17)), ys(fin(81))))
   & combine(omega18, (ys0(fin(18)), ys1(fin(18))), (ys(fin(18)), ys(fin(82))))
   & combine(omega19, (ys0(fin(19)), ys1(fin(19))), (ys(fin(19)), ys(fin(83))))
   & combine(omega20, (ys0(fin(20)), ys1(fin(20))), (ys(fin(20)), ys(fin(84))))
   & combine(omega21, (ys0(fin(21)), ys1(fin(21))), (ys(fin(21)), ys(fin(85))))
   & combine(omega22, (ys0(fin(22)), ys1(fin(22))), (ys(fin(22)), ys(fin(86))))
   & combine(omega23, (ys0(fin(23)), ys1(fin(23))), (ys(fin(23)), ys(fin(87))))
   & combine(omega24, (ys0(fin(24)), ys1(fin(24))), (ys(fin(24)), ys(fin(88))))
   & combine(omega25, (ys0(fin(25)), ys1(fin(25))), (ys(fin(25)), ys(fin(89))))
   & combine(omega26, (ys0(fin(26)), ys1(fin(26))), (ys(fin(26)), ys(fin(90))))
   & combine(omega27, (ys0(fin(27)), ys1(fin(27))), (ys(fin(27)), ys(fin(91))))
   & combine(omega28, (ys0(fin(28)), ys1(fin(28))), (ys(fin(28)), ys(fin(92))))
   & combine(omega29, (ys0(fin(29)), ys1(fin(29))), (ys(fin(29)), ys(fin(93))))
   & combine(omega30, (ys0(fin(30)), ys1(fin(30))), (ys(fin(30)), ys(fin(94))))
   & combine(omega31, (ys0(fin(31)), ys1(fin(31))), (ys(fin(31)), ys(fin(95))))
   & combine(omega32, (ys0(fin(32)), ys1(fin(32))), (ys(fin(32)), ys(fin(96))))
   & combine(omega33, (ys0(fin(33)), ys1(fin(33))), (ys(fin(33)), ys(fin(97))))
   & combine(omega34, (ys0(fin(34)), ys1(fin(34))), (ys(fin(34)), ys(fin(98))))
   & combine(omega35, (ys0(fin(35)), ys1(fin(35))), (ys(fin(35)), ys(fin(99))))
   & combine(omega36, (ys0(fin(36)), ys1(fin(36))), (ys(fin(36)), ys(fin(100))))
   & combine(omega37, (ys0(fin(37)), ys1(fin(37))), (ys(fin(37)), ys(fin(101))))
   & combine(omega38, (ys0(fin(38)), ys1(fin(38))), (ys(fin(38)), ys(fin(102))))
   & combine(omega39, (ys0(fin(39)), ys1(fin(39))), (ys(fin(39)), ys(fin(103))))
   & combine(omega40, (ys0(fin(40)), ys1(fin(40))), (ys(fin(40)), ys(fin(104))))
   & combine(omega41, (ys0(fin(41)), ys1(fin(41))), (ys(fin(41)), ys(fin(105))))
   & combine(omega42, (ys0(fin(42)), ys1(fin(42))), (ys(fin(42)), ys(fin(106))))
   & combine(omega43, (ys0(fin(43)), ys1(fin(43))), (ys(fin(43)), ys(fin(107))))
   & combine(omega44, (ys0(fin(44)), ys1(fin(44))), (ys(fin(44)), ys(fin(108))))
   & combine(omega45, (ys0(fin(45)), ys1(fin(45))), (ys(fin(45)), ys(fin(109))))
   & combine(omega46, (ys0(fin(46)), ys1(fin(46))), (ys(fin(46)), ys(fin(110))))
   & combine(omega47, (ys0(fin(47)), ys1(fin(47))), (ys(fin(47)), ys(fin(111))))
   & combine(omega48, (ys0(fin(48)), ys1(fin(48))), (ys(fin(48)), ys(fin(112))))
   & combine(omega49, (ys0(fin(49)), ys1(fin(49))), (ys(fin(49)), ys(fin(113))))
   & combine(omega50, (ys0(fin(50)), ys1(fin(50))), (ys(fin(50)), ys(fin(114))))
   & combine(omega51, (ys0(fin(51)), ys1(fin(51))), (ys(fin(51)), ys(fin(115))))
   & combine(omega52, (ys0(fin(52)), ys1(fin(52))), (ys(fin(52)), ys(fin(116))))
   & combine(omega53, (ys0(fin(53)), ys1(fin(53))), (ys(fin(53)), ys(fin(117))))
   & combine(omega54, (ys0(fin(54)), ys1(fin(54))), (ys(fin(54)), ys(fin(118))))
   & combine(omega55, (ys0(fin(55)), ys1(fin(55))), (ys(fin(55)), ys(fin(119))))
   & combine(omega56, (ys0(fin(56)), ys1(fin(56))), (ys(fin(56)), ys(fin(120))))
   & combine(omega57, (ys0(fin(57)), ys1(fin(57))), (ys(fin(57)), ys(fin(121))))
   & combine(omega58, (ys0(fin(58)), ys1(fin(58))), (ys(fin(58)), ys(fin(122))))
   & combine(omega59, (ys0(fin(59)), ys1(fin(59))), (ys(fin(59)), ys(fin(123))))
   & combine(omega60, (ys0(fin(60)), ys1(fin(60))), (ys(fin(60)), ys(fin(124))))
   & combine(omega61, (ys0(fin(61)), ys1(fin(61))), (ys(fin(61)), ys(fin(125))))
   & combine(omega62, (ys0(fin(62)), ys1(fin(62))), (ys(fin(62)), ys(fin(126))))
   & combine(omega63, (ys0(fin(63)), ys1(fin(63))), (ys(fin(63)), ys(fin(127)))).


def fft256 : (Fin(256) -> F) -> (Fin(256) -> F) -> Prop
  := \xs : Fin(256) -> F => \ys : Fin(256) -> F
  => let omega1 : F := to(F)(fin(178902808384765167578311106676137348214));
     let omega2 : F := to(F)(fin(65907963977709178563567092354521124432));
     let omega3 : F := to(F)(fin(52049495731207742922084898501367055913));
     let omega4 : F := to(F)(fin(59478736836296470922896375673044043947));
     let omega5 : F := to(F)(fin(86383719199947340949104298573560835427));
     let omega6 : F := to(F)(fin(10080743355633979073980820746207349976));
     let omega7 : F := to(F)(fin(95148447516967465415342158835103098022));
     let omega8 : F := to(F)(fin(16698199167658661640320272194027702370));
     let omega9 : F := to(F)(fin(256914423232393282026437968025137479405));
     let omega10 : F := to(F)(fin(155514080029925461915875765689528793011));
     let omega11 : F := to(F)(fin(149759029945668046513719093701322371499));
     let omega12 : F := to(F)(fin(230239576433093401532832293097799987081));
     let omega13 : F := to(F)(fin(236598788866937485852767534026282481971));
     let omega14 : F := to(F)(fin(194132420544040598451138094918501362788));
     let omega15 : F := to(F)(fin(160107319648671384114863400209383884999));
     let omega16 : F := to(F)(fin(22186728119017901039385635608201850931));
     let omega17 : F := to(F)(fin(158345012340148368954180310421069564349));
     let omega18 : F := to(F)(fin(165171464351728602222496071538917915759));
     let omega19 : F := to(F)(fin(61812896218009733244539004975489078931));
     let omega20 : F := to(F)(fin(66082323163859804339774168672220475012));
     let omega21 : F := to(F)(fin(55173179403688122568683401005112809441));
     let omega22 : F := to(F)(fin(52368989022523362401030890040631910589));
     let omega23 : F := to(F)(fin(35944696200764524564527317203324660959));
     let omega24 : F := to(F)(fin(34350062198098277421132970135534305821));
     let omega25 : F := to(F)(fin(53826900847753345735589093457714401458));
     let omega26 : F := to(F)(fin(125981173384658672605335060327246825341));
     let omega27 : F := to(F)(fin(14974704053286682106583663544013689831));
     let omega28 : F := to(F)(fin(53975102611463661700300295131436589811));
     let omega29 : F := to(F)(fin(29529470878175426042959515617483995742));
     let omega30 : F := to(F)(fin(45731804364596080071742990960990329708));
     let omega31 : F := to(F)(fin(80650435276439673922850210579676776873));
     let omega32 : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega33 : F := to(F)(fin(19590104289612311558972256235564296738));
     let omega34 : F := to(F)(fin(646071126513514338479457116666093882));
     let omega35 : F := to(F)(fin(226052958144203642834492714558604728965));
     let omega36 : F := to(F)(fin(181780365704469330345834104632378070880));
     let omega37 : F := to(F)(fin(261947066488975647020578254424281393264));
     let omega38 : F := to(F)(fin(55611006669477530418094321149794867386));
     let omega39 : F := to(F)(fin(56807236093512012702043952966949959322));
     let omega40 : F := to(F)(fin(107125704632455286753154574269440354274));
     let omega41 : F := to(F)(fin(238410046555492563659476531303831990576));
     let omega42 : F := to(F)(fin(187135511082714768634880684591229128547));
     let omega43 : F := to(F)(fin(169800907417396920637578959484419022532));
     let omega44 : F := to(F)(fin(175748425828701265334841538845137933816));
     let omega45 : F := to(F)(fin(45187440426547587418223123597182363858));
     let omega46 : F := to(F)(fin(53496544804274307075856202076079293771));
     let omega47 : F := to(F)(fin(104673880199698635809499986573521843806));
     let omega48 : F := to(F)(fin(73231901677283077325882091713770153990));
     let omega49 : F := to(F)(fin(243647913243846779458827783562781750482));
     let omega50 : F := to(F)(fin(108347376047545789579368286899060029778));
     let omega51 : F := to(F)(fin(116253025914873643157614244096800405659));
     let omega52 : F := to(F)(fin(88860983738059218942568320754437614996));
     let omega53 : F := to(F)(fin(237247665267598698672387595198301590941));
     let omega54 : F := to(F)(fin(104476918710448136045822974773644103317));
     let omega55 : F := to(F)(fin(165877318362162720803338614972758013420));
     let omega56 : F := to(F)(fin(90374378160636663023428487766167913148));
     let omega57 : F := to(F)(fin(167801930053775257124497095269393034633));
     let omega58 : F := to(F)(fin(43929742161450112436869802623156599743));
     let omega59 : F := to(F)(fin(109531508227220033216795556837291545642));
     let omega60 : F := to(F)(fin(98444187387640850276152309454388340014));
     let omega61 : F := to(F)(fin(152618450497922162430857761556554635919));
     let omega62 : F := to(F)(fin(196492777263284737445172729740627419842));
     let omega63 : F := to(F)(fin(223598675840744720527110629402191875031));
     let omega64 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega65 : F := to(F)(fin(160405080409070534142801587665025340352));
     let omega66 : F := to(F)(fin(145258429125910453228712361680196389420));
     let omega67 : F := to(F)(fin(154441157132596867561678301823113708713));
     let omega68 : F := to(F)(fin(100703521582087853386340341793494523820));
     let omega69 : F := to(F)(fin(69025715271782792608523669515786117668));
     let omega70 : F := to(F)(fin(167990255399084614625398011033513433967));
     let omega71 : F := to(F)(fin(166144048524178425403369819547465719989));
     let omega72 : F := to(F)(fin(162806147425635384733525067434736806136));
     let omega73 : F := to(F)(fin(259260895480051845655952716434744254547));
     let omega74 : F := to(F)(fin(249804383098053691690433466673672256150));
     let omega75 : F := to(F)(fin(67655540847326234359247928103369628094));
     let omega76 : F := to(F)(fin(137011298098866627214397059271234920884));
     let omega77 : F := to(F)(fin(10593210532705533429842316363489716073));
     let omega78 : F := to(F)(fin(22109119444620255491656599370014894118));
     let omega79 : F := to(F)(fin(104796790961030043750619125123177858335));
     let omega80 : F := to(F)(fin(266437655688779403589114768359918648781));
     let omega81 : F := to(F)(fin(120281128077741429891077470918514907358));
     let omega82 : F := to(F)(fin(218884243067799520092859976286523983462));
     let omega83 : F := to(F)(fin(8699754588276570880840379434488809221));
     let omega84 : F := to(F)(fin(167518099136818620742107111461969078554));
     let omega85 : F := to(F)(fin(254847863279742744946759948683815296614));
     let omega86 : F := to(F)(fin(81221284648176836047816392199558901810));
     let omega87 : F := to(F)(fin(265809018262973731634079158749101155551));
     let omega88 : F := to(F)(fin(144022985169312756131804347043517484647));
     let omega89 : F := to(F)(fin(77278682051167172635473090909500439551));
     let omega90 : F := to(F)(fin(127508946414583913393496651359134117178));
     let omega91 : F := to(F)(fin(65350452503632947380043873952089883523));
     let omega92 : F := to(F)(fin(173027906138811040234738490632352065247));
     let omega93 : F := to(F)(fin(259211620016050797385167566225598009150));
     let omega94 : F := to(F)(fin(147515479292872070656581089263671104447));
     let omega95 : F := to(F)(fin(254243288062990647475720029246322397992));
     let omega96 : F := to(F)(fin(94118632892422173191291920064315934488));
     let omega97 : F := to(F)(fin(16551708436791364294595475288185926551));
     let omega98 : F := to(F)(fin(258631907013871381269861234031607317568));
     let omega99 : F := to(F)(fin(23470974322779339244481637776512711179));
     let omega100 : F := to(F)(fin(266218309391531664192048397095017306631));
     let omega101 : F := to(F)(fin(103392174654992700619994049411419656941));
     let omega102 : F := to(F)(fin(105927649836782660661359579301354132376));
     let omega103 : F := to(F)(fin(197642287414568706849877513692760869177));
     let omega104 : F := to(F)(fin(90666895636146090046074637791036353677));
     let omega105 : F := to(F)(fin(31858342166576958299696373830788260702));
     let omega106 : F := to(F)(fin(2956470401820075415746174703645418480));
     let omega107 : F := to(F)(fin(142311832509656903167891818769712678228));
     let omega108 : F := to(F)(fin(160023194695147206377062539534574021330));
     let omega109 : F := to(F)(fin(96456650917557789940946764328452109521));
     let omega110 : F := to(F)(fin(217783932944107721720455816777548457284));
     let omega111 : F := to(F)(fin(71219288709062046859359724351350574483));
     let omega112 : F := to(F)(fin(196366951967922674545239204167809605584));
     let omega113 : F := to(F)(fin(200179787694569368585627379265273726189));
     let omega114 : F := to(F)(fin(198299637922638238992009055366939691179));
     let omega115 : F := to(F)(fin(72026689403509083859954710791938105637));
     let omega116 : F := to(F)(fin(209738890145307597667055477969839115273));
     let omega117 : F := to(F)(fin(200776477682380844287882315240724741235));
     let omega118 : F := to(F)(fin(79710547658162008818621698923701135801));
     let omega119 : F := to(F)(fin(181511903445039969978900014154673746420));
     let omega120 : F := to(F)(fin(227466907842111639850817356847064975718));
     let omega121 : F := to(F)(fin(57657988282933648161051224937045175973));
     let omega122 : F := to(F)(fin(204262520294779538392537716498324354516));
     let omega123 : F := to(F)(fin(160093976091169728697718369950602495776));
     let omega124 : F := to(F)(fin(126268713548946527012676081801390371621));
     let omega125 : F := to(F)(fin(181918912889564722913799428142465239543));
     let omega126 : F := to(F)(fin(256566110679969874514434967353409990301));
     let omega127 : F := to(F)(fin(109772875124438180902124317934256157845));
     some ys0 : Fin(128) ->^128 F,
     some ys1 : Fin(128) ->^128 F,
     let xs0 : Fin(128) -> F := \i : Fin(128) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(128) -> F := \i : Fin(128) => xs(cast((2N *N cast(i)) +N 1N));
     fft128(xs0, ys0) & fft128(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(128))))
   & combine(omega1, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(129))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(130))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(131))))
   & combine(omega4, (ys0(fin(4)), ys1(fin(4))), (ys(fin(4)), ys(fin(132))))
   & combine(omega5, (ys0(fin(5)), ys1(fin(5))), (ys(fin(5)), ys(fin(133))))
   & combine(omega6, (ys0(fin(6)), ys1(fin(6))), (ys(fin(6)), ys(fin(134))))
   & combine(omega7, (ys0(fin(7)), ys1(fin(7))), (ys(fin(7)), ys(fin(135))))
   & combine(omega8, (ys0(fin(8)), ys1(fin(8))), (ys(fin(8)), ys(fin(136))))
   & combine(omega9, (ys0(fin(9)), ys1(fin(9))), (ys(fin(9)), ys(fin(137))))
   & combine(omega10, (ys0(fin(10)), ys1(fin(10))), (ys(fin(10)), ys(fin(138))))
   & combine(omega11, (ys0(fin(11)), ys1(fin(11))), (ys(fin(11)), ys(fin(139))))
   & combine(omega12, (ys0(fin(12)), ys1(fin(12))), (ys(fin(12)), ys(fin(140))))
   & combine(omega13, (ys0(fin(13)), ys1(fin(13))), (ys(fin(13)), ys(fin(141))))
   & combine(omega14, (ys0(fin(14)), ys1(fin(14))), (ys(fin(14)), ys(fin(142))))
   & combine(omega15, (ys0(fin(15)), ys1(fin(15))), (ys(fin(15)), ys(fin(143))))
   & combine(omega16, (ys0(fin(16)), ys1(fin(16))), (ys(fin(16)), ys(fin(144))))
   & combine(omega17, (ys0(fin(17)), ys1(fin(17))), (ys(fin(17)), ys(fin(145))))
   & combine(omega18, (ys0(fin(18)), ys1(fin(18))), (ys(fin(18)), ys(fin(146))))
   & combine(omega19, (ys0(fin(19)), ys1(fin(19))), (ys(fin(19)), ys(fin(147))))
   & combine(omega20, (ys0(fin(20)), ys1(fin(20))), (ys(fin(20)), ys(fin(148))))
   & combine(omega21, (ys0(fin(21)), ys1(fin(21))), (ys(fin(21)), ys(fin(149))))
   & combine(omega22, (ys0(fin(22)), ys1(fin(22))), (ys(fin(22)), ys(fin(150))))
   & combine(omega23, (ys0(fin(23)), ys1(fin(23))), (ys(fin(23)), ys(fin(151))))
   & combine(omega24, (ys0(fin(24)), ys1(fin(24))), (ys(fin(24)), ys(fin(152))))
   & combine(omega25, (ys0(fin(25)), ys1(fin(25))), (ys(fin(25)), ys(fin(153))))
   & combine(omega26, (ys0(fin(26)), ys1(fin(26))), (ys(fin(26)), ys(fin(154))))
   & combine(omega27, (ys0(fin(27)), ys1(fin(27))), (ys(fin(27)), ys(fin(155))))
   & combine(omega28, (ys0(fin(28)), ys1(fin(28))), (ys(fin(28)), ys(fin(156))))
   & combine(omega29, (ys0(fin(29)), ys1(fin(29))), (ys(fin(29)), ys(fin(157))))
   & combine(omega30, (ys0(fin(30)), ys1(fin(30))), (ys(fin(30)), ys(fin(158))))
   & combine(omega31, (ys0(fin(31)), ys1(fin(31))), (ys(fin(31)), ys(fin(159))))
   & combine(omega32, (ys0(fin(32)), ys1(fin(32))), (ys(fin(32)), ys(fin(160))))
   & combine(omega33, (ys0(fin(33)), ys1(fin(33))), (ys(fin(33)), ys(fin(161))))
   & combine(omega34, (ys0(fin(34)), ys1(fin(34))), (ys(fin(34)), ys(fin(162))))
   & combine(omega35, (ys0(fin(35)), ys1(fin(35))), (ys(fin(35)), ys(fin(163))))
   & combine(omega36, (ys0(fin(36)), ys1(fin(36))), (ys(fin(36)), ys(fin(164))))
   & combine(omega37, (ys0(fin(37)), ys1(fin(37))), (ys(fin(37)), ys(fin(165))))
   & combine(omega38, (ys0(fin(38)), ys1(fin(38))), (ys(fin(38)), ys(fin(166))))
   & combine(omega39, (ys0(fin(39)), ys1(fin(39))), (ys(fin(39)), ys(fin(167))))
   & combine(omega40, (ys0(fin(40)), ys1(fin(40))), (ys(fin(40)), ys(fin(168))))
   & combine(omega41, (ys0(fin(41)), ys1(fin(41))), (ys(fin(41)), ys(fin(169))))
   & combine(omega42, (ys0(fin(42)), ys1(fin(42))), (ys(fin(42)), ys(fin(170))))
   & combine(omega43, (ys0(fin(43)), ys1(fin(43))), (ys(fin(43)), ys(fin(171))))
   & combine(omega44, (ys0(fin(44)), ys1(fin(44))), (ys(fin(44)), ys(fin(172))))
   & combine(omega45, (ys0(fin(45)), ys1(fin(45))), (ys(fin(45)), ys(fin(173))))
   & combine(omega46, (ys0(fin(46)), ys1(fin(46))), (ys(fin(46)), ys(fin(174))))
   & combine(omega47, (ys0(fin(47)), ys1(fin(47))), (ys(fin(47)), ys(fin(175))))
   & combine(omega48, (ys0(fin(48)), ys1(fin(48))), (ys(fin(48)), ys(fin(176))))
   & combine(omega49, (ys0(fin(49)), ys1(fin(49))), (ys(fin(49)), ys(fin(177))))
   & combine(omega50, (ys0(fin(50)), ys1(fin(50))), (ys(fin(50)), ys(fin(178))))
   & combine(omega51, (ys0(fin(51)), ys1(fin(51))), (ys(fin(51)), ys(fin(179))))
   & combine(omega52, (ys0(fin(52)), ys1(fin(52))), (ys(fin(52)), ys(fin(180))))
   & combine(omega53, (ys0(fin(53)), ys1(fin(53))), (ys(fin(53)), ys(fin(181))))
   & combine(omega54, (ys0(fin(54)), ys1(fin(54))), (ys(fin(54)), ys(fin(182))))
   & combine(omega55, (ys0(fin(55)), ys1(fin(55))), (ys(fin(55)), ys(fin(183))))
   & combine(omega56, (ys0(fin(56)), ys1(fin(56))), (ys(fin(56)), ys(fin(184))))
   & combine(omega57, (ys0(fin(57)), ys1(fin(57))), (ys(fin(57)), ys(fin(185))))
   & combine(omega58, (ys0(fin(58)), ys1(fin(58))), (ys(fin(58)), ys(fin(186))))
   & combine(omega59, (ys0(fin(59)), ys1(fin(59))), (ys(fin(59)), ys(fin(187))))
   & combine(omega60, (ys0(fin(60)), ys1(fin(60))), (ys(fin(60)), ys(fin(188))))
   & combine(omega61, (ys0(fin(61)), ys1(fin(61))), (ys(fin(61)), ys(fin(189))))
   & combine(omega62, (ys0(fin(62)), ys1(fin(62))), (ys(fin(62)), ys(fin(190))))
   & combine(omega63, (ys0(fin(63)), ys1(fin(63))), (ys(fin(63)), ys(fin(191))))
   & combine(omega64, (ys0(fin(64)), ys1(fin(64))), (ys(fin(64)), ys(fin(192))))
   & combine(omega65, (ys0(fin(65)), ys1(fin(65))), (ys(fin(65)), ys(fin(193))))
   & combine(omega66, (ys0(fin(66)), ys1(fin(66))), (ys(fin(66)), ys(fin(194))))
   & combine(omega67, (ys0(fin(67)), ys1(fin(67))), (ys(fin(67)), ys(fin(195))))
   & combine(omega68, (ys0(fin(68)), ys1(fin(68))), (ys(fin(68)), ys(fin(196))))
   & combine(omega69, (ys0(fin(69)), ys1(fin(69))), (ys(fin(69)), ys(fin(197))))
   & combine(omega70, (ys0(fin(70)), ys1(fin(70))), (ys(fin(70)), ys(fin(198))))
   & combine(omega71, (ys0(fin(71)), ys1(fin(71))), (ys(fin(71)), ys(fin(199))))
   & combine(omega72, (ys0(fin(72)), ys1(fin(72))), (ys(fin(72)), ys(fin(200))))
   & combine(omega73, (ys0(fin(73)), ys1(fin(73))), (ys(fin(73)), ys(fin(201))))
   & combine(omega74, (ys0(fin(74)), ys1(fin(74))), (ys(fin(74)), ys(fin(202))))
   & combine(omega75, (ys0(fin(75)), ys1(fin(75))), (ys(fin(75)), ys(fin(203))))
   & combine(omega76, (ys0(fin(76)), ys1(fin(76))), (ys(fin(76)), ys(fin(204))))
   & combine(omega77, (ys0(fin(77)), ys1(fin(77))), (ys(fin(77)), ys(fin(205))))
   & combine(omega78, (ys0(fin(78)), ys1(fin(78))), (ys(fin(78)), ys(fin(206))))
   & combine(omega79, (ys0(fin(79)), ys1(fin(79))), (ys(fin(79)), ys(fin(207))))
   & combine(omega80, (ys0(fin(80)), ys1(fin(80))), (ys(fin(80)), ys(fin(208))))
   & combine(omega81, (ys0(fin(81)), ys1(fin(81))), (ys(fin(81)), ys(fin(209))))
   & combine(omega82, (ys0(fin(82)), ys1(fin(82))), (ys(fin(82)), ys(fin(210))))
   & combine(omega83, (ys0(fin(83)), ys1(fin(83))), (ys(fin(83)), ys(fin(211))))
   & combine(omega84, (ys0(fin(84)), ys1(fin(84))), (ys(fin(84)), ys(fin(212))))
   & combine(omega85, (ys0(fin(85)), ys1(fin(85))), (ys(fin(85)), ys(fin(213))))
   & combine(omega86, (ys0(fin(86)), ys1(fin(86))), (ys(fin(86)), ys(fin(214))))
   & combine(omega87, (ys0(fin(87)), ys1(fin(87))), (ys(fin(87)), ys(fin(215))))
   & combine(omega88, (ys0(fin(88)), ys1(fin(88))), (ys(fin(88)), ys(fin(216))))
   & combine(omega89, (ys0(fin(89)), ys1(fin(89))), (ys(fin(89)), ys(fin(217))))
   & combine(omega90, (ys0(fin(90)), ys1(fin(90))), (ys(fin(90)), ys(fin(218))))
   & combine(omega91, (ys0(fin(91)), ys1(fin(91))), (ys(fin(91)), ys(fin(219))))
   & combine(omega92, (ys0(fin(92)), ys1(fin(92))), (ys(fin(92)), ys(fin(220))))
   & combine(omega93, (ys0(fin(93)), ys1(fin(93))), (ys(fin(93)), ys(fin(221))))
   & combine(omega94, (ys0(fin(94)), ys1(fin(94))), (ys(fin(94)), ys(fin(222))))
   & combine(omega95, (ys0(fin(95)), ys1(fin(95))), (ys(fin(95)), ys(fin(223))))
   & combine(omega96, (ys0(fin(96)), ys1(fin(96))), (ys(fin(96)), ys(fin(224))))
   & combine(omega97, (ys0(fin(97)), ys1(fin(97))), (ys(fin(97)), ys(fin(225))))
   & combine(omega98, (ys0(fin(98)), ys1(fin(98))), (ys(fin(98)), ys(fin(226))))
   & combine(omega99, (ys0(fin(99)), ys1(fin(99))), (ys(fin(99)), ys(fin(227))))
   & combine(omega100, (ys0(fin(100)), ys1(fin(100))), (ys(fin(100)), ys(fin(228))))
   & combine(omega101, (ys0(fin(101)), ys1(fin(101))), (ys(fin(101)), ys(fin(229))))
   & combine(omega102, (ys0(fin(102)), ys1(fin(102))), (ys(fin(102)), ys(fin(230))))
   & combine(omega103, (ys0(fin(103)), ys1(fin(103))), (ys(fin(103)), ys(fin(231))))
   & combine(omega104, (ys0(fin(104)), ys1(fin(104))), (ys(fin(104)), ys(fin(232))))
   & combine(omega105, (ys0(fin(105)), ys1(fin(105))), (ys(fin(105)), ys(fin(233))))
   & combine(omega106, (ys0(fin(106)), ys1(fin(106))), (ys(fin(106)), ys(fin(234))))
   & combine(omega107, (ys0(fin(107)), ys1(fin(107))), (ys(fin(107)), ys(fin(235))))
   & combine(omega108, (ys0(fin(108)), ys1(fin(108))), (ys(fin(108)), ys(fin(236))))
   & combine(omega109, (ys0(fin(109)), ys1(fin(109))), (ys(fin(109)), ys(fin(237))))
   & combine(omega110, (ys0(fin(110)), ys1(fin(110))), (ys(fin(110)), ys(fin(238))))
   & combine(omega111, (ys0(fin(111)), ys1(fin(111))), (ys(fin(111)), ys(fin(239))))
   & combine(omega112, (ys0(fin(112)), ys1(fin(112))), (ys(fin(112)), ys(fin(240))))
   & combine(omega113, (ys0(fin(113)), ys1(fin(113))), (ys(fin(113)), ys(fin(241))))
   & combine(omega114, (ys0(fin(114)), ys1(fin(114))), (ys(fin(114)), ys(fin(242))))
   & combine(omega115, (ys0(fin(115)), ys1(fin(115))), (ys(fin(115)), ys(fin(243))))
   & combine(omega116, (ys0(fin(116)), ys1(fin(116))), (ys(fin(116)), ys(fin(244))))
   & combine(omega117, (ys0(fin(117)), ys1(fin(117))), (ys(fin(117)), ys(fin(245))))
   & combine(omega118, (ys0(fin(118)), ys1(fin(118))), (ys(fin(118)), ys(fin(246))))
   & combine(omega119, (ys0(fin(119)), ys1(fin(119))), (ys(fin(119)), ys(fin(247))))
   & combine(omega120, (ys0(fin(120)), ys1(fin(120))), (ys(fin(120)), ys(fin(248))))
   & combine(omega121, (ys0(fin(121)), ys1(fin(121))), (ys(fin(121)), ys(fin(249))))
   & combine(omega122, (ys0(fin(122)), ys1(fin(122))), (ys(fin(122)), ys(fin(250))))
   & combine(omega123, (ys0(fin(123)), ys1(fin(123))), (ys(fin(123)), ys(fin(251))))
   & combine(omega124, (ys0(fin(124)), ys1(fin(124))), (ys(fin(124)), ys(fin(252))))
   & combine(omega125, (ys0(fin(125)), ys1(fin(125))), (ys(fin(125)), ys(fin(253))))
   & combine(omega126, (ys0(fin(126)), ys1(fin(126))), (ys(fin(126)), ys(fin(254))))
   & combine(omega127, (ys0(fin(127)), ys1(fin(127))), (ys(fin(127)), ys(fin(255)))).

-- Rescue hash
-- https://eprint.iacr.org/2019/426.pdf
-- Algorithm 2, page 31
-- Appendix E, page 52
-- Rescue(122, 270497897142230380135924736767050121217, 12, 3)
--         ^ security level                                 ^ alpha
--             ^ field size                             ^ hash size
--
-- Number of rounds: 10
--
-- Initial constant (K_0):
-- [  2216844448078315804513775635066424552]
-- [ 21608484086542672902458569325092710164]
-- [104894189082473148121547460048317651477]
-- [199306640770664859218471543508601492115]
-- [ 19336074018540128228261223471209517302]
-- [102905927964609995117373233014764735768]
-- [214199415292044012309322972152454815277]
-- [ 63691195578845317224477580770659524520]
-- [128483105970030959860391940153550927921]
-- [126256156711237828329945642464663556222]
-- [236940313873139925496700074342944288858]
-- [ 50576721957559374045898832726828025211]
--
-- Constants matrix:
-- [158474793974778482761512475025298404373  15166806393480328185657810410645333782 100212731929647970938760211439994687100  97507235222219837493854105171169725322 227254089901505052758388518764752936098 200221235550398978313007525930403561013  89345334567351848960753801352325286347 137903155244256324169289490474697420543 212141065234606946768302166158609168711 238699993379559895552685145495205165281 230602747449683122147733078437935077741   2850842102059720690306570800781892493]
-- [240716274412270484181175440411358545559 181495465186923617711191377479859851311 190569886462127259065909375762112769285 184388701466776068631916984327332460632  61481330323824717521555308908880049658 212647201557684988972411346281400145350 140777286281915027516353703688335824129  41621988048374240289859435995038480045  60295967670398098596754638905191436936 105095972229830738971130643300972094099  49606791378993380598176055821431598097  17489330228890415217538751963720343494]
-- [ 94942452647725685802898846953137327291  98807768300933744742149115114985962108  30311253624240780281722119721448008789  80893782179183230034633918056441815766  67571189855846066045734894820507217515  99243639409637972869324714341313082354 219521640452900457735640959781479709553 215412614265591406713768704706147128068 238743702666896432549611232481451250111  14844997586837403471679650990596112975  90840004372970011132456788377356261405 161235339517263866033827592110424678673]
-- [227679993767785137219852177155246284863  50746615205509885538563409169833848129 178557884743690456204717673366559432210  11755011816167113825135173200728289912 252771506045415985055095433948986985050  66389495699044291077570312042042377946 195731893348189212877554619249586936546 209304045027514388891959300650023489127 136596237124543181307072633504770913797 186778457160016392240684770835658508664  17272678133757781667805526142726016942 117231045935102227195676086307269596673]
-- [157589256054400917115983524587022565388 104370358424111711632559153993352999866  65752904216965931303903519375677093781 264751654840167470089556141333184969467 160338122441139071854414238287476958604  65420732061375285274136967649343896756 121630673199010314301744589347165616713  68887797572028579422760838414268633867 141523942764630374871761546094466434629  52481885861712702319581795599134387485  12030890219317826856261360096533471628  71961646483136547990635694059818070629]
-- [259330161057905561309476501074852421454  79794018808380436901029981668513839408 249354934888545096876323704071950168121  96876270416905190285206106821616091801  12086226141566422443454003486702523630 103449777468818477752433949707618166725   8493778688938636177617873781794789451 209596463197551913092722842065280895452 256896997558730796255707061435444935700 233179550449934093276500440765782305697 205509287019641084401269199528566363460  50695938068758127074277332951538106395]
-- [167924573947544960959603319128957890229  96097774060295912608902780923873493212  37235538678174508630770548837098625310  81259948854580563839368815379041344831 150514655871321721023559592921885725014  39356926393838497567371718211360109291   9164919233098330749055609479018771674 105908971967201539623843580816643358271 237104948219419979262332072388503864793 195387895089390944099733559310467626170 190464319138815245648195317050687451592 141265547818180206184491426399088468297]
-- [191532573161256728364539699300759796280  49799514811303234122441904979616722311 187364952281286680053321683742791945988  42616094169935974594428547230457752043 177081205954563010601919634022806614555 180587506008082067767112117907182137513  19248718708664294964082161064198995210 112125810553960057498335175087962451411  55124679393844497143855202510364800341 215467829848406356320803293727633227549 166770551589828539607849182631366533233  64347183204761962236963662133744757976]
-- [231233131181242793209351405213734031960 205911173649949829621568770315056212525 224094700540680805293647090959244277062 202671195857903449161801593958548755886  17706475789746503126644227467606696864  33052980923360961783292740892252865605   2118359915503770162599821076753485932 241487155362501849374238212925882408465 138281113223819984453460743610898984052  97863002593005335023178841894922085304 161956354634223351141227918109952571660 198091723184153736108022524962984384576]
-- [175898817708083192207337136296929337141 147718538622243572190153738652347865187   7632564985354199778721633453724278803  87035311374147701544553355439743431953 172377311836598699346316337684053549340 132050494143222011873271943433097254252 178968288819103770991503708821162263397  64842524257790317680800688025240067215  99071291844560574195636502595470800275  17853174391246143170147158464298366848 129370189802606939602522744216164365479    493522791365257156651763245920988949]
-- [246917151098819749901259129818472851073 133753944750515692880519070385089056505 254899064261645951961037698430436336209 112177023412283045067397707616170332174 197636228430238926503616146109076600748 229025478966208608871133674172614428277  48359419789455490898063154164074750741 122955532895645754877325994079016199161 219139166993221343912712299441991387574 212575487096227838285543918521210918814  52654532092018586900238289877605126551 132555930928151025766325807207493708749]
-- [253926867632195570349635102691901569535  60415772229938158082725257939037704393  47565364492075913670796465060051877809 139063887540830575497421285545431690727 183135413518956704369237880744472416992 226912509953903585977970152155705488813 225645990076533672052232378591491630962 120500958866765088512822902364842433958  90455394168300295967563169866786405717  57412269792517628490005161426484016952 177205109771487306309804441470096593728 144245052682789331230701629758880958351]
--
-- Constants constant:
-- [219736100891291697960817999276695498815]
-- [ 30237405432194535781167492605947954370]
-- [ 61024656440418325114184268803042316427]
-- [250778928685681455230131233018456997367]
-- [206184735959438751661554757299890749360]
-- [257619876367697339697833411182415501479]
-- [208178368163378506558634443445031978638]
-- [ 39896427435418005594406832197134022296]
-- [ 35614838430670717980691445047116303175]
-- [  5695233777740536632613170480935502422]
-- [ 56979167907136261265004533147954998758]
-- [140085991168772413621350857690215877389]
--
-- Constants (K_j[i]) are generated by repeatedly applying the
-- affine transformation, defined by the constants matrix and the
-- constants constant, to the initial constant.
--
-- K_1[i]:
-- [ 62564617521083824164067335701049545527]
-- [180993412298677919016147611206233499810]
-- [147476503877939349577030205255418544366]
-- [ 90676729433562842755376309061743467953]
-- [102927952558032121454973466517038905431]
-- [267086847885019727727978801091561094803]
-- [105986979655801290862645998690822152419]
-- [213964448173558480993642795389022788767]
-- [199000873233171321059354523728582647634]
-- [ 39807121024755032315616778371938664661]
-- [113763963999544126026069404851621685239]
-- [217665344875088091306505750401547628182]
--
-- K_2[i]:
-- [166923037913205855019886609819563882020]
-- [ 80251061920321834668265379978511578841]
-- [165065211277485559922416955561666340038]
-- [151117707773653830053343355180741616932]
-- [156073475172790549501083625350765091375]
-- [191227967460019884857479277402348043900]
-- [ 77146016464201801645961763081771308326]
-- [ 59007105076778658900713758790340663766]
-- [200413156470490675295851117125189618041]
-- [ 66469733909439448387937019059063719570]
-- [250215178545432960741355068562386593748]
-- [142834490932545504269605268488851478491]
--
-- K_3[i]:
-- [224672637781464802071468594476542242194]
-- [157675599398533520818946424560026926406]
-- [143468905244933412047255365589771528606]
-- [179368638535273634862810447165330629801]
-- [265246427926240657287569827288049333487]
-- [196656555867819632410384960207418707883]
-- [140534764561044779170768336685901117128]
-- [ 76988326805894915073960339492755156047]
-- [ 94286361595225338252457950255882380316]
-- [224162068556594830414325008402865512413]
-- [ 18511371158729719095906931910555371502]
-- [268670939895165870276521340381714018960]
--
-- K_4[i]:
-- [235614644128926617469176374018935985853]
-- [ 82117696831107534466423295970647647917]
-- [ 63617972213143492577286155505654917563]
-- [ 39087818889790853477166569938328390255]
-- [265778349321117408480622956266030536307]
-- [192365377044300919368794391025934911559]
-- [ 26866403681232466094921500737598977844]
-- [252322999995537168680891214239688501125]
-- [115710210109262315939300327936640396026]
-- [ 14587958744755968902664707396861755885]
-- [106702406475191936894966428772444755765]
-- [219354452519087536317089786634014946795]
--
-- K_5[i]:
-- [ 48804176980480216831407258043935521688]
-- [ 44634485209307050787468502654905940816]
-- [183277215895217452464760392384873658756]
-- [124814430171654668143338563237104181611]
-- [ 20943098869610441200507141418655364845]
-- [ 92855372725052007485933676503674257601]
-- [ 32838090383731287409426057326710582618]
-- [174290750151938735182436461439835852695]
-- [261688293168915766982702242849699237236]
-- [ 34149519077744769006151842611106523144]
-- [241173173125614597500914620592946106513]
-- [204291908080814762268706996810498376406]
--
-- K_6[i]:
-- [ 28195627517977564602821356860856915850]
-- [227026247535943316601018576468591281650]
-- [ 37177584371926107164248080925354312964]
-- [194944668981426876096113298479588095180]
-- [ 42099632882619144109374042564541639132]
-- [212206086720828414319759051785320547151]
-- [  5965904364695369168268207535000549354]
-- [ 33079372609945484655587556740602123292]
-- [124475393361203470295028990999193234308]
-- [197830492430279498930785540382321533115]
-- [256829407318514431891168402801590399362]
-- [212087912946287149495147257338563227221]
--
-- K_7[i]:
-- [137285675811286898606735673091440263719]
-- [ 80284786464317569611490891337532097214]
-- [ 33595845763776271424859900633448737317]
-- [ 71182905867187188356706594004028619533]
-- [252438804969677843461741349084062267307]
-- [102918881610365361272145019718621808151]
-- [189797749708085914270699324283588724662]
-- [ 52633874466393826560175258975892952924]
-- [ 64212220642957254056494874337444786293]
-- [120583531846704149238273201129440466225]
-- [152450199696834009145591486219304511993]
-- [ 24432122533462669872381605587956645585]
--
-- K_8[i]:
-- [184064353224640644222792135688836850153]
-- [200493895306664702388753801373149320230]
-- [192254579528031596092260988378521007553]
-- [107880239112595449739797183470524288418]
-- [ 78211279207440846931070103828269851997]
-- [211136940494951003385550206075439986255]
-- [267987451035285398166559197800904938745]
-- [258115685470153415582900860198902201939]
-- [164231979391193816367158265043772348885]
-- [186056288706530794551485438391463402947]
-- [  3749257185297534794077909959814015601]
-- [248744329053365406780998139426576322365]
--
-- K_9[i]:
-- [181458925101829213897117340920659616813]
-- [103611202557185148173503048170170280908]
-- [ 54384181211782003856859845289358565172]
-- [121618386304453765305051173395939162816]
-- [178307073076396632648195230854370318799]
-- [234056483729407562223555898206461904912]
-- [ 13797524568474317349773048544308063780]
-- [ 20470783802666171475318327336658615088]
-- [215284493698864734006175570454006599179]
-- [ 49390623667603036494397266298657336877]
-- [254296102018120460348616676489730216086]
-- [ 45747092880008204346236985905981905666]
--
-- K_10[i]:
-- [189319322500958135126286843129301758160]
-- [175569461950987447608550167235808288561]
-- [ 87335843220962502245500968348494788132]
-- [ 61787293951700483324043654286451354404]
-- [193618975452806757112298964809331131386]
-- [215540293393069085587571777718994848012]
-- [ 55895924294127760033410605804249135404]
-- [ 59015954273372188107155559147333609698]
-- [ 67349410234003211589125112263198708635]
-- [ 29150694171251555965657752970789229613]
-- [181679275956999187964920966310033490927]
-- [173507948724753178505686456684681639444]
--
-- MDS matrix (M[i,j]):
-- [270497866239075997503312374846408317688 262286310959677242379115183827016395337  23214492933337983329649633096994306180  49308039521151291300156364346041710498  13029705981742993952151453257634491814 127670171763397930943017009984724074547 104716438417679101818508370058274222089 186906211966080919306437035660993407892 220693126467358826066731756134998582372 147065188999760120574682573494156252140  96045105095781978216859918665150615863 151045158437196990770853783415724470641]
-- [       46354644349343413982791427120040  12317325193353149330894976093695225271 222845557229149399230398734577220160262 138347776741937973510770185479992508507 136892576624437548795967885413200991996  97003677229139463775312816093391598793 149324424154678001161172973660231174835  40985621797284275437124104108688275117  99394196876493642542765387133862822696 248226619931538492121494074272148397661  92876698072099111093272492279919011531 142628035275004629080851368041152961627]
-- [270497879759336876628692579161565378447 265878961035122787750419790152628396857 268989649185661990333027907164645160839  66576275855773882033344736134503939855 214875173344877532515006372186140460362 142121909554612848786870709527539989270 134857347426030379458659843401837845437 212385507793664017165704933923905081363 144898097737264951924562064884874192100 239621804200969765938505954356726060836  91993359817073268490027402862371573223 216655842372467611446657387402276028496]
-- [        2005684514155313731182099084120    532933106207846457417549763147623630 172041594768893186863342162288388706176 261712672980825108327360322297655582911 227234211816576936783408133365520552019  34503318959960449088129511480107847999 154304712046281768224467777065596530494 167429785177541644715698839793137037254 157581960906610683800637577114547365715 138278965659628641366890113738564362272 270443940127048216235953791109764120356 171674576842163517138600887141842657038]
-- [270497897067021032079978835118814192674 270477914519949468346252498698216759377  75259886852935615756230090629010961995  95852739111343199193072134969188882384 264977008833802997841114246377804269133  40123464462688721362041680557498551514 139293710339578322660199904633266694042 129501836156060341503981788588306044783 160637252620944274919017121754547382625  11012598074146709803214876562745611290 174228529969458528790743590198430071844  61371981199875656819599259972429447964]
-- [            932205185500733324287445520       247630352543198913028011787645857  49345320733417741860134440444314707760 176251666328384850512102527022193717671 196501644319430408311204515261141772488 237520966953967321978873168588776351274  30577614954253598217944397718714446366  72654116335514828621499920627040315608 185106036748085654378389419376807979208  57599179102889169698266869078073233616  78637412977600649399859952812485090613 234568309071105115573893876698994845369]
-- [270497897142226540387557440374568149157 270497896122864649163428059781721783537 270294809341811511991437808871999893274 242904614046680183869045781197682578523 127620545162027442727860381599664831034 136223763033073612095271354969808835539 128389049157378644121803807885942389521 186892272182265079427756281521599007811 152549162319134443184924500038001718265 187278682205336138000163153340731452590 149981014937172638577795839891045707265 213314679687547496751407122727913435165]
-- [                 5262325557309654266160            1394465398721024939122063140       277649216608545833578715747679120  51060870350938105279607305341639074457 249843727288899938843991787261853959939 148177967716086883599532453325502732630  34017596441668978095592385368017263581 237429496894753069779660541291255733409 205416241509620263352642265418316838327 166691363345727158419806909345998702400  29633304219561029069876955417589814148  59960451854851469244154718217643548146]
-- [270497897142230380133528088948492201290 270497897142229748560991946866221384937 270497897016709389109315597745995166147 270474827385032075275463843176934960057 191405474734255874214510138250140129758  51693229672320670809672089910197890320 132938248950896101581138848829497486696  81763227988148354260889924430236316486 227797655867664197714395290553625273445 258205150159071251923121625752286713367 101250296653549812544898566670359185080   3928742954495466133232276695420607757]
-- [                        360795585898440                    93473955266375556873              18474501523657262996104920         3389238712694166948093293686530    607342200317660968552251408754164960  71831961707311634734376965578050883903 216938203501722508222399249214470444996 197196288549535648269008980050470529333 148435511960666019019380749364858353756  14620177553031289067936433598358562831 161737245393279068046646956116298397828 250504600788486310127216622537746208717]
-- [270497897142230380135924736749398408047 270497897142230380135920407149412487257 270497897142230379294645068112347798990 270497897142076897073175372875383027337 270497869688932521048355631439078301337 265618999524799081216024383802663420577 117360886387445563968423164798243610269  84201579929191027660860760886514142761 235378066771823424802061850391014192343 119585747261648492603805238962001723108 205626447533284380230656303333801843783 228996082811851538856733396890019569411]
-- [                                 265720                             52955405230                        9741692640081640                  1747282899667791058573             310804949350361548416923680        55133793282290501540016988429720   9771253933538933149312961201158497760  25641438083343074666925309720154835486 226095867352176659381889911970946268885  34801906359635051297660598100509655192 170534028057473600118956651245085295769 158836818700566859008272457628187068189]

data Plaintext ~= Fin(12) -> F.

data Hash ~= Fin(12) -> F.

def addK0 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(2216844448078315804513775635066424552)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(21608484086542672902458569325092710164)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(104894189082473148121547460048317651477)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(199306640770664859218471543508601492115)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(19336074018540128228261223471209517302)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(102905927964609995117373233014764735768)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(214199415292044012309322972152454815277)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(63691195578845317224477580770659524520)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(128483105970030959860391940153550927921)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(126256156711237828329945642464663556222)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(236940313873139925496700074342944288858)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(50576721957559374045898832726828025211)), ys(fin(11))).

-- y = x^alpha
def powerOfAlpha : F -> F -> Prop
  := \x : F => \y : F
  => some xx : F,
     mul(x, x, xx)
   & mul(xx, x, y).

def rescueBox0 : F -> F -> Prop
  := \x : F => \y : F
  => powerOfAlpha(y, x).

def rescueBox1 : F -> F -> Prop
  := \x : F => \y : F
  => powerOfAlpha(x, y).

def todo : Prop := 0N = 1N.

def rescueHash : Plaintext -> Hash -> Prop
  := \p : Plaintext => \h : Hash
  => todo.

-- Merkle commitments

data MerkleHash ~= Hash.

-- FRI

def codewordLength : N := 256N.

def offset : F := to(F)(fin(85408008396924667383611388730472331217)).

def omega : F := to(F)(fin(178902808384765167578311106676137348214)).

def domainLength : N := 256N.

def expansionFactor : N := 2N.

def numColinearityTests : N := 4N.

def numRounds : N := 4N.

data Commitment ~= MerkleHash.

data Commitments ~= Fin(4) -> Commitment.

data A ~= F.

data B ~= F.

data C ~= F.

data Query ~= A * B * C.

data QueryRound ~= Fin(2).

data IndexNumber ~= Fin(4).

data Queries ~= QueryRound -> IndexNumber -> Query.

data Index ~= Fin(256).

data Codeword ~= Index -> F.

data DepthIndex ~= Fin(8).

data AuthPath ~= DepthIndex -> MerkleHash.

data AAuthPath ~= AuthPath.

data BAuthPath ~= AuthPath.

data CAuthPath ~= AuthPath.

data AOpening ~= A * AAuthPath.

data BOpening ~= B * BAuthPath.

data COpening ~= C * CAuthPath.

data IndexOpenings ~= AOpening * BOpening * COpening.

data Openings ~= QueryRound -> IndexNumber -> IndexOpenings.

data Proof ~= Commitments * Codeword * Openings.
