-- A verifier for a simple version of FRI.

-- Finite field

data F ~= Fin(270497897142230380135924736767050121217).

def zero : F := to(F)(fin(0)).
def one : F := to(F)(fin(1)).

def cardinality : N := 270497897142230380135924736767050121217N.

def toN : F -> N
  := \x : F => cast(from(F)(x)).

def add : F -> F -> F -> Prop
  := \a : F => \b : F => \c : F
  => some d : N < cardinality,
     (toN(a) +N toN(b)) = (toN(c) +N (cardinality *N d)).

def mul : F -> F -> F -> Prop
  := \a : F => \b : F => \c : F
  => some d : N < cardinality,
     (toN(a) *N toN(b)) = (toN(c) +N (cardinality *N d)).

def negate : F -> F -> Prop
  := \a : F => \b : F
  => add(a, b, zero).

-- FFT

def combine1 : (F * F) -> (F * F) -> Prop
  := \x : (F * F) => \y : (F * F)
  => some negX2 : F,
     negate(pi2(x), negX2)
   & add(pi1(x), pi2(x), pi1(y))
   & add(pi1(x), negX2, pi2(y)).

def combine : F -> (F * F) -> (F * F) -> Prop
  := \omega : F => \x : (F * F) => \y : (F * F)
  => some x2Omega : F, some negX2Omega : F,
     mul(omega, pi2(x), x2Omega)
   & negate(x2Omega, negX2Omega)
   & add(pi1(x), x2Omega, pi1(y))
   & add(pi1(x), negX2Omega, pi2(y)).

def fft2 : (Fin(2) -> F) -> (Fin(2) -> F) -> Prop
  := \xs : Fin(2) -> F => \ys : Fin(2) -> F
  => combine1((xs(fin(0)), xs(fin(1))), (ys(fin(0)), ys(fin(1)))).

def fft4 : (Fin(4) -> F) -> (Fin(4) -> F) -> Prop
  := \xs : Fin(4) -> F => \ys : Fin(4) -> F
  => let omega : F := to(F)(fin(259052015163170058651980223774986375587));
     some ys0 : Fin(2) ->^2 F,
     some ys1 : Fin(2) ->^2 F,
     let xs0 : Fin(2) -> F := \i : Fin(2) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(2) -> F := \i : Fin(2) => xs(cast((2N *N cast(i)) +N 1N));
     fft2(xs0, ys0) & fft2(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(2))))
   & combine(omega, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(3)))).

def fft8 : (Fin(8) -> F) -> (Fin(8) -> F) -> Prop
  := \xs : Fin(8) -> F => \ys : Fin(8) -> F
  => let omega : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega2 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega3 : F := to(F)(fin(94118632892422173191291920064315934488));
     some ys0 : Fin(4) ->^4 F,
     some ys1 : Fin(4) ->^4 F,
     let xs0 : Fin(4) -> F := \i : Fin(4) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(4) -> F := \i : Fin(4) => xs(cast((2N *N cast(i)) +N 1N));
     fft4(xs0, ys0) & fft4(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(4))))
   & combine(omega, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(5))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(6))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(7)))).

def fft16 : (Fin(16) -> F) -> (Fin(16) -> F) -> Prop
  := \xs : Fin(16) -> F => \ys : Fin(16) -> F
  => let omega : F := to(F)(fin(22186728119017901039385635608201850931));
     let omega2 : F := to(F)(fin(131076302407280330469229082343774091404));
     let omega3 : F := to(F)(fin(73231901677283077325882091713770153990));
     let omega4 : F := to(F)(fin(259052015163170058651980223774986375587));
     let omega5 : F := to(F)(fin(266437655688779403589114768359918648781));
     let omega6 : F := to(F)(fin(94118632892422173191291920064315934488));
     let omega7 : F := to(F)(fin(196366951967922674545239204167809605584));
     some ys0 : Fin(8) ->^8 F,
     some ys1 : Fin(8) ->^8 F,
     let xs0 : Fin(8) -> F := \i : Fin(8) => xs(cast(2N *N cast(i)));
     let xs1 : Fin(8) -> F := \i : Fin(8) => xs(cast((2N *N cast(i)) +N 1N));
     fft8(xs0, ys0) & fft8(xs1, ys1)
   & combine1((ys0(fin(0)), ys1(fin(0))), (ys(fin(0)), ys(fin(8))))
   & combine(omega, (ys0(fin(1)), ys1(fin(1))), (ys(fin(1)), ys(fin(9))))
   & combine(omega2, (ys0(fin(2)), ys1(fin(2))), (ys(fin(2)), ys(fin(10))))
   & combine(omega3, (ys0(fin(3)), ys1(fin(3))), (ys(fin(3)), ys(fin(11))))
   & combine(omega4, (ys0(fin(4)), ys1(fin(4))), (ys(fin(4)), ys(fin(12))))
   & combine(omega5, (ys0(fin(5)), ys1(fin(5))), (ys(fin(5)), ys(fin(13))))
   & combine(omega6, (ys0(fin(6)), ys1(fin(6))), (ys(fin(6)), ys(fin(14))))
   & combine(omega7, (ys0(fin(7)), ys1(fin(7))), (ys(fin(7)), ys(fin(15)))).

-- Rescue hash
-- https://eprint.iacr.org/2019/426.pdf
-- Algorithm 2, page 31
-- Appendix E, page 52
-- Rescue(122, 270497897142230380135924736767050121217, 12, 3)
--         ^ security level                                 ^ alpha
--             ^ field size                             ^ hash size
--
-- Number of rounds: 10
--
-- Initial constant (K_0):
-- [  2216844448078315804513775635066424552]
-- [ 21608484086542672902458569325092710164]
-- [104894189082473148121547460048317651477]
-- [199306640770664859218471543508601492115]
-- [ 19336074018540128228261223471209517302]
-- [102905927964609995117373233014764735768]
-- [214199415292044012309322972152454815277]
-- [ 63691195578845317224477580770659524520]
-- [128483105970030959860391940153550927921]
-- [126256156711237828329945642464663556222]
-- [236940313873139925496700074342944288858]
-- [ 50576721957559374045898832726828025211]
--
-- Constants matrix:
-- [158474793974778482761512475025298404373  15166806393480328185657810410645333782 100212731929647970938760211439994687100  97507235222219837493854105171169725322 227254089901505052758388518764752936098 200221235550398978313007525930403561013  89345334567351848960753801352325286347 137903155244256324169289490474697420543 212141065234606946768302166158609168711 238699993379559895552685145495205165281 230602747449683122147733078437935077741   2850842102059720690306570800781892493]
-- [240716274412270484181175440411358545559 181495465186923617711191377479859851311 190569886462127259065909375762112769285 184388701466776068631916984327332460632  61481330323824717521555308908880049658 212647201557684988972411346281400145350 140777286281915027516353703688335824129  41621988048374240289859435995038480045  60295967670398098596754638905191436936 105095972229830738971130643300972094099  49606791378993380598176055821431598097  17489330228890415217538751963720343494]
-- [ 94942452647725685802898846953137327291  98807768300933744742149115114985962108  30311253624240780281722119721448008789  80893782179183230034633918056441815766  67571189855846066045734894820507217515  99243639409637972869324714341313082354 219521640452900457735640959781479709553 215412614265591406713768704706147128068 238743702666896432549611232481451250111  14844997586837403471679650990596112975  90840004372970011132456788377356261405 161235339517263866033827592110424678673]
-- [227679993767785137219852177155246284863  50746615205509885538563409169833848129 178557884743690456204717673366559432210  11755011816167113825135173200728289912 252771506045415985055095433948986985050  66389495699044291077570312042042377946 195731893348189212877554619249586936546 209304045027514388891959300650023489127 136596237124543181307072633504770913797 186778457160016392240684770835658508664  17272678133757781667805526142726016942 117231045935102227195676086307269596673]
-- [157589256054400917115983524587022565388 104370358424111711632559153993352999866  65752904216965931303903519375677093781 264751654840167470089556141333184969467 160338122441139071854414238287476958604  65420732061375285274136967649343896756 121630673199010314301744589347165616713  68887797572028579422760838414268633867 141523942764630374871761546094466434629  52481885861712702319581795599134387485  12030890219317826856261360096533471628  71961646483136547990635694059818070629]
-- [259330161057905561309476501074852421454  79794018808380436901029981668513839408 249354934888545096876323704071950168121  96876270416905190285206106821616091801  12086226141566422443454003486702523630 103449777468818477752433949707618166725   8493778688938636177617873781794789451 209596463197551913092722842065280895452 256896997558730796255707061435444935700 233179550449934093276500440765782305697 205509287019641084401269199528566363460  50695938068758127074277332951538106395]
-- [167924573947544960959603319128957890229  96097774060295912608902780923873493212  37235538678174508630770548837098625310  81259948854580563839368815379041344831 150514655871321721023559592921885725014  39356926393838497567371718211360109291   9164919233098330749055609479018771674 105908971967201539623843580816643358271 237104948219419979262332072388503864793 195387895089390944099733559310467626170 190464319138815245648195317050687451592 141265547818180206184491426399088468297]
-- [191532573161256728364539699300759796280  49799514811303234122441904979616722311 187364952281286680053321683742791945988  42616094169935974594428547230457752043 177081205954563010601919634022806614555 180587506008082067767112117907182137513  19248718708664294964082161064198995210 112125810553960057498335175087962451411  55124679393844497143855202510364800341 215467829848406356320803293727633227549 166770551589828539607849182631366533233  64347183204761962236963662133744757976]
-- [231233131181242793209351405213734031960 205911173649949829621568770315056212525 224094700540680805293647090959244277062 202671195857903449161801593958548755886  17706475789746503126644227467606696864  33052980923360961783292740892252865605   2118359915503770162599821076753485932 241487155362501849374238212925882408465 138281113223819984453460743610898984052  97863002593005335023178841894922085304 161956354634223351141227918109952571660 198091723184153736108022524962984384576]
-- [175898817708083192207337136296929337141 147718538622243572190153738652347865187   7632564985354199778721633453724278803  87035311374147701544553355439743431953 172377311836598699346316337684053549340 132050494143222011873271943433097254252 178968288819103770991503708821162263397  64842524257790317680800688025240067215  99071291844560574195636502595470800275  17853174391246143170147158464298366848 129370189802606939602522744216164365479    493522791365257156651763245920988949]
-- [246917151098819749901259129818472851073 133753944750515692880519070385089056505 254899064261645951961037698430436336209 112177023412283045067397707616170332174 197636228430238926503616146109076600748 229025478966208608871133674172614428277  48359419789455490898063154164074750741 122955532895645754877325994079016199161 219139166993221343912712299441991387574 212575487096227838285543918521210918814  52654532092018586900238289877605126551 132555930928151025766325807207493708749]
-- [253926867632195570349635102691901569535  60415772229938158082725257939037704393  47565364492075913670796465060051877809 139063887540830575497421285545431690727 183135413518956704369237880744472416992 226912509953903585977970152155705488813 225645990076533672052232378591491630962 120500958866765088512822902364842433958  90455394168300295967563169866786405717  57412269792517628490005161426484016952 177205109771487306309804441470096593728 144245052682789331230701629758880958351]
--
-- Constants constant:
-- [219736100891291697960817999276695498815]
-- [ 30237405432194535781167492605947954370]
-- [ 61024656440418325114184268803042316427]
-- [250778928685681455230131233018456997367]
-- [206184735959438751661554757299890749360]
-- [257619876367697339697833411182415501479]
-- [208178368163378506558634443445031978638]
-- [ 39896427435418005594406832197134022296]
-- [ 35614838430670717980691445047116303175]
-- [  5695233777740536632613170480935502422]
-- [ 56979167907136261265004533147954998758]
-- [140085991168772413621350857690215877389]
--
-- Constants (K_j[i]) are generated by repeatedly applying the
-- affine transformation, defined by the constants matrix and the
-- constants constant, to the initial constant.
--
-- K_1[i]:
-- [ 62564617521083824164067335701049545527]
-- [180993412298677919016147611206233499810]
-- [147476503877939349577030205255418544366]
-- [ 90676729433562842755376309061743467953]
-- [102927952558032121454973466517038905431]
-- [267086847885019727727978801091561094803]
-- [105986979655801290862645998690822152419]
-- [213964448173558480993642795389022788767]
-- [199000873233171321059354523728582647634]
-- [ 39807121024755032315616778371938664661]
-- [113763963999544126026069404851621685239]
-- [217665344875088091306505750401547628182]
--
-- K_2[i]:
-- [166923037913205855019886609819563882020]
-- [ 80251061920321834668265379978511578841]
-- [165065211277485559922416955561666340038]
-- [151117707773653830053343355180741616932]
-- [156073475172790549501083625350765091375]
-- [191227967460019884857479277402348043900]
-- [ 77146016464201801645961763081771308326]
-- [ 59007105076778658900713758790340663766]
-- [200413156470490675295851117125189618041]
-- [ 66469733909439448387937019059063719570]
-- [250215178545432960741355068562386593748]
-- [142834490932545504269605268488851478491]
--
-- K_3[i]:
-- [224672637781464802071468594476542242194]
-- [157675599398533520818946424560026926406]
-- [143468905244933412047255365589771528606]
-- [179368638535273634862810447165330629801]
-- [265246427926240657287569827288049333487]
-- [196656555867819632410384960207418707883]
-- [140534764561044779170768336685901117128]
-- [ 76988326805894915073960339492755156047]
-- [ 94286361595225338252457950255882380316]
-- [224162068556594830414325008402865512413]
-- [ 18511371158729719095906931910555371502]
-- [268670939895165870276521340381714018960]
--
-- K_4[i]:
-- [235614644128926617469176374018935985853]
-- [ 82117696831107534466423295970647647917]
-- [ 63617972213143492577286155505654917563]
-- [ 39087818889790853477166569938328390255]
-- [265778349321117408480622956266030536307]
-- [192365377044300919368794391025934911559]
-- [ 26866403681232466094921500737598977844]
-- [252322999995537168680891214239688501125]
-- [115710210109262315939300327936640396026]
-- [ 14587958744755968902664707396861755885]
-- [106702406475191936894966428772444755765]
-- [219354452519087536317089786634014946795]
--
-- K_5[i]:
-- [ 48804176980480216831407258043935521688]
-- [ 44634485209307050787468502654905940816]
-- [183277215895217452464760392384873658756]
-- [124814430171654668143338563237104181611]
-- [ 20943098869610441200507141418655364845]
-- [ 92855372725052007485933676503674257601]
-- [ 32838090383731287409426057326710582618]
-- [174290750151938735182436461439835852695]
-- [261688293168915766982702242849699237236]
-- [ 34149519077744769006151842611106523144]
-- [241173173125614597500914620592946106513]
-- [204291908080814762268706996810498376406]
--
-- K_6[i]:
-- [ 28195627517977564602821356860856915850]
-- [227026247535943316601018576468591281650]
-- [ 37177584371926107164248080925354312964]
-- [194944668981426876096113298479588095180]
-- [ 42099632882619144109374042564541639132]
-- [212206086720828414319759051785320547151]
-- [  5965904364695369168268207535000549354]
-- [ 33079372609945484655587556740602123292]
-- [124475393361203470295028990999193234308]
-- [197830492430279498930785540382321533115]
-- [256829407318514431891168402801590399362]
-- [212087912946287149495147257338563227221]
--
-- K_7[i]:
-- [137285675811286898606735673091440263719]
-- [ 80284786464317569611490891337532097214]
-- [ 33595845763776271424859900633448737317]
-- [ 71182905867187188356706594004028619533]
-- [252438804969677843461741349084062267307]
-- [102918881610365361272145019718621808151]
-- [189797749708085914270699324283588724662]
-- [ 52633874466393826560175258975892952924]
-- [ 64212220642957254056494874337444786293]
-- [120583531846704149238273201129440466225]
-- [152450199696834009145591486219304511993]
-- [ 24432122533462669872381605587956645585]
--
-- K_8[i]:
-- [184064353224640644222792135688836850153]
-- [200493895306664702388753801373149320230]
-- [192254579528031596092260988378521007553]
-- [107880239112595449739797183470524288418]
-- [ 78211279207440846931070103828269851997]
-- [211136940494951003385550206075439986255]
-- [267987451035285398166559197800904938745]
-- [258115685470153415582900860198902201939]
-- [164231979391193816367158265043772348885]
-- [186056288706530794551485438391463402947]
-- [  3749257185297534794077909959814015601]
-- [248744329053365406780998139426576322365]
--
-- K_9[i]:
-- [181458925101829213897117340920659616813]
-- [103611202557185148173503048170170280908]
-- [ 54384181211782003856859845289358565172]
-- [121618386304453765305051173395939162816]
-- [178307073076396632648195230854370318799]
-- [234056483729407562223555898206461904912]
-- [ 13797524568474317349773048544308063780]
-- [ 20470783802666171475318327336658615088]
-- [215284493698864734006175570454006599179]
-- [ 49390623667603036494397266298657336877]
-- [254296102018120460348616676489730216086]
-- [ 45747092880008204346236985905981905666]
--
-- K_10[i]:
-- [189319322500958135126286843129301758160]
-- [175569461950987447608550167235808288561]
-- [ 87335843220962502245500968348494788132]
-- [ 61787293951700483324043654286451354404]
-- [193618975452806757112298964809331131386]
-- [215540293393069085587571777718994848012]
-- [ 55895924294127760033410605804249135404]
-- [ 59015954273372188107155559147333609698]
-- [ 67349410234003211589125112263198708635]
-- [ 29150694171251555965657752970789229613]
-- [181679275956999187964920966310033490927]
-- [173507948724753178505686456684681639444]
--
-- MDS matrix (M[i,j]):
-- [270497866239075997503312374846408317688 262286310959677242379115183827016395337  23214492933337983329649633096994306180  49308039521151291300156364346041710498  13029705981742993952151453257634491814 127670171763397930943017009984724074547 104716438417679101818508370058274222089 186906211966080919306437035660993407892 220693126467358826066731756134998582372 147065188999760120574682573494156252140  96045105095781978216859918665150615863 151045158437196990770853783415724470641]
-- [       46354644349343413982791427120040  12317325193353149330894976093695225271 222845557229149399230398734577220160262 138347776741937973510770185479992508507 136892576624437548795967885413200991996  97003677229139463775312816093391598793 149324424154678001161172973660231174835  40985621797284275437124104108688275117  99394196876493642542765387133862822696 248226619931538492121494074272148397661  92876698072099111093272492279919011531 142628035275004629080851368041152961627]
-- [270497879759336876628692579161565378447 265878961035122787750419790152628396857 268989649185661990333027907164645160839  66576275855773882033344736134503939855 214875173344877532515006372186140460362 142121909554612848786870709527539989270 134857347426030379458659843401837845437 212385507793664017165704933923905081363 144898097737264951924562064884874192100 239621804200969765938505954356726060836  91993359817073268490027402862371573223 216655842372467611446657387402276028496]
-- [        2005684514155313731182099084120    532933106207846457417549763147623630 172041594768893186863342162288388706176 261712672980825108327360322297655582911 227234211816576936783408133365520552019  34503318959960449088129511480107847999 154304712046281768224467777065596530494 167429785177541644715698839793137037254 157581960906610683800637577114547365715 138278965659628641366890113738564362272 270443940127048216235953791109764120356 171674576842163517138600887141842657038]
-- [270497897067021032079978835118814192674 270477914519949468346252498698216759377  75259886852935615756230090629010961995  95852739111343199193072134969188882384 264977008833802997841114246377804269133  40123464462688721362041680557498551514 139293710339578322660199904633266694042 129501836156060341503981788588306044783 160637252620944274919017121754547382625  11012598074146709803214876562745611290 174228529969458528790743590198430071844  61371981199875656819599259972429447964]
-- [            932205185500733324287445520       247630352543198913028011787645857  49345320733417741860134440444314707760 176251666328384850512102527022193717671 196501644319430408311204515261141772488 237520966953967321978873168588776351274  30577614954253598217944397718714446366  72654116335514828621499920627040315608 185106036748085654378389419376807979208  57599179102889169698266869078073233616  78637412977600649399859952812485090613 234568309071105115573893876698994845369]
-- [270497897142226540387557440374568149157 270497896122864649163428059781721783537 270294809341811511991437808871999893274 242904614046680183869045781197682578523 127620545162027442727860381599664831034 136223763033073612095271354969808835539 128389049157378644121803807885942389521 186892272182265079427756281521599007811 152549162319134443184924500038001718265 187278682205336138000163153340731452590 149981014937172638577795839891045707265 213314679687547496751407122727913435165]
-- [                 5262325557309654266160            1394465398721024939122063140       277649216608545833578715747679120  51060870350938105279607305341639074457 249843727288899938843991787261853959939 148177967716086883599532453325502732630  34017596441668978095592385368017263581 237429496894753069779660541291255733409 205416241509620263352642265418316838327 166691363345727158419806909345998702400  29633304219561029069876955417589814148  59960451854851469244154718217643548146]
-- [270497897142230380133528088948492201290 270497897142229748560991946866221384937 270497897016709389109315597745995166147 270474827385032075275463843176934960057 191405474734255874214510138250140129758  51693229672320670809672089910197890320 132938248950896101581138848829497486696  81763227988148354260889924430236316486 227797655867664197714395290553625273445 258205150159071251923121625752286713367 101250296653549812544898566670359185080   3928742954495466133232276695420607757]
-- [                        360795585898440                    93473955266375556873              18474501523657262996104920         3389238712694166948093293686530    607342200317660968552251408754164960  71831961707311634734376965578050883903 216938203501722508222399249214470444996 197196288549535648269008980050470529333 148435511960666019019380749364858353756  14620177553031289067936433598358562831 161737245393279068046646956116298397828 250504600788486310127216622537746208717]
-- [270497897142230380135924736749398408047 270497897142230380135920407149412487257 270497897142230379294645068112347798990 270497897142076897073175372875383027337 270497869688932521048355631439078301337 265618999524799081216024383802663420577 117360886387445563968423164798243610269  84201579929191027660860760886514142761 235378066771823424802061850391014192343 119585747261648492603805238962001723108 205626447533284380230656303333801843783 228996082811851538856733396890019569411]
-- [                                 265720                             52955405230                        9741692640081640                  1747282899667791058573             310804949350361548416923680        55133793282290501540016988429720   9771253933538933149312961201158497760  25641438083343074666925309720154835486 226095867352176659381889911970946268885  34801906359635051297660598100509655192 170534028057473600118956651245085295769 158836818700566859008272457628187068189]

data Plaintext ~= Fin(12) -> F.

data Hash ~= Fin(12) -> F.

def addK0 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(2216844448078315804513775635066424552)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(21608484086542672902458569325092710164)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(104894189082473148121547460048317651477)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(199306640770664859218471543508601492115)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(19336074018540128228261223471209517302)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(102905927964609995117373233014764735768)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(214199415292044012309322972152454815277)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(63691195578845317224477580770659524520)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(128483105970030959860391940153550927921)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(126256156711237828329945642464663556222)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(236940313873139925496700074342944288858)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(50576721957559374045898832726828025211)), ys(fin(11))).

def addK1 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(62564617521083824164067335701049545527)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(180993412298677919016147611206233499810)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(147476503877939349577030205255418544366)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(90676729433562842755376309061743467953)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(102927952558032121454973466517038905431)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(267086847885019727727978801091561094803)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(105986979655801290862645998690822152419)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(213964448173558480993642795389022788767)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(199000873233171321059354523728582647634)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(39807121024755032315616778371938664661)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(113763963999544126026069404851621685239)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(217665344875088091306505750401547628182)), ys(fin(11))).

def addK2 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(166923037913205855019886609819563882020)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(80251061920321834668265379978511578841)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(165065211277485559922416955561666340038)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(151117707773653830053343355180741616932)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(156073475172790549501083625350765091375)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(191227967460019884857479277402348043900)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(77146016464201801645961763081771308326)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(59007105076778658900713758790340663766)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(200413156470490675295851117125189618041)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(66469733909439448387937019059063719570)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(250215178545432960741355068562386593748)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(142834490932545504269605268488851478491)), ys(fin(11))).

def addK3 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(224672637781464802071468594476542242194)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(157675599398533520818946424560026926406)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(143468905244933412047255365589771528606)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(179368638535273634862810447165330629801)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(265246427926240657287569827288049333487)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(196656555867819632410384960207418707883)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(140534764561044779170768336685901117128)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(76988326805894915073960339492755156047)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(94286361595225338252457950255882380316)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(224162068556594830414325008402865512413)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(18511371158729719095906931910555371502)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(268670939895165870276521340381714018960)), ys(fin(11))).

def addK4 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(235614644128926617469176374018935985853)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(82117696831107534466423295970647647917)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(63617972213143492577286155505654917563)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(39087818889790853477166569938328390255)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(265778349321117408480622956266030536307)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(192365377044300919368794391025934911559)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(26866403681232466094921500737598977844)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(252322999995537168680891214239688501125)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(115710210109262315939300327936640396026)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(14587958744755968902664707396861755885)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(106702406475191936894966428772444755765)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(219354452519087536317089786634014946795)), ys(fin(11))).

def addK5 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(48804176980480216831407258043935521688)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(44634485209307050787468502654905940816)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(183277215895217452464760392384873658756)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(124814430171654668143338563237104181611)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(20943098869610441200507141418655364845)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(92855372725052007485933676503674257601)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(32838090383731287409426057326710582618)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(174290750151938735182436461439835852695)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(261688293168915766982702242849699237236)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(34149519077744769006151842611106523144)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(241173173125614597500914620592946106513)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(204291908080814762268706996810498376406)), ys(fin(11))).

def addK6 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(28195627517977564602821356860856915850)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(227026247535943316601018576468591281650)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(37177584371926107164248080925354312964)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(194944668981426876096113298479588095180)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(42099632882619144109374042564541639132)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(212206086720828414319759051785320547151)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(5965904364695369168268207535000549354)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(33079372609945484655587556740602123292)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(124475393361203470295028990999193234308)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(197830492430279498930785540382321533115)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(256829407318514431891168402801590399362)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(212087912946287149495147257338563227221)), ys(fin(11))).

def addK7 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(137285675811286898606735673091440263719)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(80284786464317569611490891337532097214)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(33595845763776271424859900633448737317)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(71182905867187188356706594004028619533)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(252438804969677843461741349084062267307)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(102918881610365361272145019718621808151)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(189797749708085914270699324283588724662)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(52633874466393826560175258975892952924)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(64212220642957254056494874337444786293)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(120583531846704149238273201129440466225)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(152450199696834009145591486219304511993)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(24432122533462669872381605587956645585)), ys(fin(11))).

def addK8 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(184064353224640644222792135688836850153)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(200493895306664702388753801373149320230)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(192254579528031596092260988378521007553)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(107880239112595449739797183470524288418)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(78211279207440846931070103828269851997)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(211136940494951003385550206075439986255)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(267987451035285398166559197800904938745)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(258115685470153415582900860198902201939)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(164231979391193816367158265043772348885)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(186056288706530794551485438391463402947)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(3749257185297534794077909959814015601)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(248744329053365406780998139426576322365)), ys(fin(11))).

def addK9 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(181458925101829213897117340920659616813)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(103611202557185148173503048170170280908)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(54384181211782003856859845289358565172)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(121618386304453765305051173395939162816)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(178307073076396632648195230854370318799)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(234056483729407562223555898206461904912)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(13797524568474317349773048544308063780)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(20470783802666171475318327336658615088)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(215284493698864734006175570454006599179)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(49390623667603036494397266298657336877)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(254296102018120460348616676489730216086)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(45747092880008204346236985905981905666)), ys(fin(11))).

def addK10 : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  := \xs : Fin(12) -> F => \ys : Fin(12) -> F
  => add(xs(fin(0)), to(F)(fin(189319322500958135126286843129301758160)), ys(fin(0)))
   & add(xs(fin(1)), to(F)(fin(175569461950987447608550167235808288561)), ys(fin(1)))
   & add(xs(fin(2)), to(F)(fin(87335843220962502245500968348494788132)), ys(fin(2)))
   & add(xs(fin(3)), to(F)(fin(61787293951700483324043654286451354404)), ys(fin(3)))
   & add(xs(fin(4)), to(F)(fin(193618975452806757112298964809331131386)), ys(fin(4)))
   & add(xs(fin(5)), to(F)(fin(215540293393069085587571777718994848012)), ys(fin(5)))
   & add(xs(fin(6)), to(F)(fin(55895924294127760033410605804249135404)), ys(fin(6)))
   & add(xs(fin(7)), to(F)(fin(59015954273372188107155559147333609698)), ys(fin(7)))
   & add(xs(fin(8)), to(F)(fin(67349410234003211589125112263198708635)), ys(fin(8)))
   & add(xs(fin(9)), to(F)(fin(29150694171251555965657752970789229613)), ys(fin(9)))
   & add(xs(fin(10)), to(F)(fin(181679275956999187964920966310033490927)), ys(fin(10)))
   & add(xs(fin(11)), to(F)(fin(173507948724753178505686456684681639444)), ys(fin(11))).

data I ~= Fin(12).

data J ~= Fin(12).

-- y = M[i,j] * x
def mulM : I -> J -> F -> F -> Prop
  := \i : I => \j : J => \x : F => \y : F
  => let i' : Fin(12) := from(I)(i);
     let j' : Fin(12) := from(J)(j);
     ((i' = fin(0)) & (j' = fin(0)) & mul(to(F)(fin(270497866239075997503312374846408317688)), x, y))
   | ((i' = fin(0)) & (j' = fin(1)) & mul(to(F)(fin(262286310959677242379115183827016395337)), x, y))
   | ((i' = fin(0)) & (j' = fin(2)) & mul(to(F)(fin(23214492933337983329649633096994306180)), x, y))
   | ((i' = fin(0)) & (j' = fin(3)) & mul(to(F)(fin(49308039521151291300156364346041710498)), x, y))
   | ((i' = fin(0)) & (j' = fin(4)) & mul(to(F)(fin(13029705981742993952151453257634491814)), x, y))
   | ((i' = fin(0)) & (j' = fin(5)) & mul(to(F)(fin(127670171763397930943017009984724074547)), x, y))
   | ((i' = fin(0)) & (j' = fin(6)) & mul(to(F)(fin(104716438417679101818508370058274222089)), x, y))
   | ((i' = fin(0)) & (j' = fin(7)) & mul(to(F)(fin(186906211966080919306437035660993407892)), x, y))
   | ((i' = fin(0)) & (j' = fin(8)) & mul(to(F)(fin(220693126467358826066731756134998582372)), x, y))
   | ((i' = fin(0)) & (j' = fin(9)) & mul(to(F)(fin(147065188999760120574682573494156252140)), x, y))
   | ((i' = fin(0)) & (j' = fin(10)) & mul(to(F)(fin(96045105095781978216859918665150615863)), x, y))
   | ((i' = fin(0)) & (j' = fin(11)) & mul(to(F)(fin(151045158437196990770853783415724470641)), x, y))
   | ((i' = fin(1)) & (j' = fin(0)) & mul(to(F)(fin(46354644349343413982791427120040)), x, y))
   | ((i' = fin(1)) & (j' = fin(1)) & mul(to(F)(fin(12317325193353149330894976093695225271)), x, y))
   | ((i' = fin(1)) & (j' = fin(2)) & mul(to(F)(fin(222845557229149399230398734577220160262)), x, y))
   | ((i' = fin(1)) & (j' = fin(3)) & mul(to(F)(fin(138347776741937973510770185479992508507)), x, y))
   | ((i' = fin(1)) & (j' = fin(4)) & mul(to(F)(fin(136892576624437548795967885413200991996)), x, y))
   | ((i' = fin(1)) & (j' = fin(5)) & mul(to(F)(fin(97003677229139463775312816093391598793)), x, y))
   | ((i' = fin(1)) & (j' = fin(6)) & mul(to(F)(fin(149324424154678001161172973660231174835)), x, y))
   | ((i' = fin(1)) & (j' = fin(7)) & mul(to(F)(fin(40985621797284275437124104108688275117)), x, y))
   | ((i' = fin(1)) & (j' = fin(8)) & mul(to(F)(fin(99394196876493642542765387133862822696)), x, y))
   | ((i' = fin(1)) & (j' = fin(9)) & mul(to(F)(fin(248226619931538492121494074272148397661)), x, y))
   | ((i' = fin(1)) & (j' = fin(10)) & mul(to(F)(fin(92876698072099111093272492279919011531)), x, y))
   | ((i' = fin(1)) & (j' = fin(11)) & mul(to(F)(fin(142628035275004629080851368041152961627)), x, y))
   | ((i' = fin(2)) & (j' = fin(0)) & mul(to(F)(fin(270497879759336876628692579161565378447)), x, y))
   | ((i' = fin(2)) & (j' = fin(1)) & mul(to(F)(fin(265878961035122787750419790152628396857)), x, y))
   | ((i' = fin(2)) & (j' = fin(2)) & mul(to(F)(fin(268989649185661990333027907164645160839)), x, y))
   | ((i' = fin(2)) & (j' = fin(3)) & mul(to(F)(fin(66576275855773882033344736134503939855)), x, y))
   | ((i' = fin(2)) & (j' = fin(4)) & mul(to(F)(fin(214875173344877532515006372186140460362)), x, y))
   | ((i' = fin(2)) & (j' = fin(5)) & mul(to(F)(fin(142121909554612848786870709527539989270)), x, y))
   | ((i' = fin(2)) & (j' = fin(6)) & mul(to(F)(fin(134857347426030379458659843401837845437)), x, y))
   | ((i' = fin(2)) & (j' = fin(7)) & mul(to(F)(fin(212385507793664017165704933923905081363)), x, y))
   | ((i' = fin(2)) & (j' = fin(8)) & mul(to(F)(fin(144898097737264951924562064884874192100)), x, y))
   | ((i' = fin(2)) & (j' = fin(9)) & mul(to(F)(fin(239621804200969765938505954356726060836)), x, y))
   | ((i' = fin(2)) & (j' = fin(10)) & mul(to(F)(fin(91993359817073268490027402862371573223)), x, y))
   | ((i' = fin(2)) & (j' = fin(11)) & mul(to(F)(fin(216655842372467611446657387402276028496)), x, y))
   | ((i' = fin(3)) & (j' = fin(0)) & mul(to(F)(fin(2005684514155313731182099084120)), x, y))
   | ((i' = fin(3)) & (j' = fin(1)) & mul(to(F)(fin(532933106207846457417549763147623630)), x, y))
   | ((i' = fin(3)) & (j' = fin(2)) & mul(to(F)(fin(172041594768893186863342162288388706176)), x, y))
   | ((i' = fin(3)) & (j' = fin(3)) & mul(to(F)(fin(261712672980825108327360322297655582911)), x, y))
   | ((i' = fin(3)) & (j' = fin(4)) & mul(to(F)(fin(227234211816576936783408133365520552019)), x, y))
   | ((i' = fin(3)) & (j' = fin(5)) & mul(to(F)(fin(34503318959960449088129511480107847999)), x, y))
   | ((i' = fin(3)) & (j' = fin(6)) & mul(to(F)(fin(154304712046281768224467777065596530494)), x, y))
   | ((i' = fin(3)) & (j' = fin(7)) & mul(to(F)(fin(167429785177541644715698839793137037254)), x, y))
   | ((i' = fin(3)) & (j' = fin(8)) & mul(to(F)(fin(157581960906610683800637577114547365715)), x, y))
   | ((i' = fin(3)) & (j' = fin(9)) & mul(to(F)(fin(138278965659628641366890113738564362272)), x, y))
   | ((i' = fin(3)) & (j' = fin(10)) & mul(to(F)(fin(270443940127048216235953791109764120356)), x, y))
   | ((i' = fin(3)) & (j' = fin(11)) & mul(to(F)(fin(171674576842163517138600887141842657038)), x, y))
   | ((i' = fin(4)) & (j' = fin(0)) & mul(to(F)(fin(270497897067021032079978835118814192674)), x, y))
   | ((i' = fin(4)) & (j' = fin(1)) & mul(to(F)(fin(270477914519949468346252498698216759377)), x, y))
   | ((i' = fin(4)) & (j' = fin(2)) & mul(to(F)(fin(75259886852935615756230090629010961995)), x, y))
   | ((i' = fin(4)) & (j' = fin(3)) & mul(to(F)(fin(95852739111343199193072134969188882384)), x, y))
   | ((i' = fin(4)) & (j' = fin(4)) & mul(to(F)(fin(264977008833802997841114246377804269133)), x, y))
   | ((i' = fin(4)) & (j' = fin(5)) & mul(to(F)(fin(40123464462688721362041680557498551514)), x, y))
   | ((i' = fin(4)) & (j' = fin(6)) & mul(to(F)(fin(139293710339578322660199904633266694042)), x, y))
   | ((i' = fin(4)) & (j' = fin(7)) & mul(to(F)(fin(129501836156060341503981788588306044783)), x, y))
   | ((i' = fin(4)) & (j' = fin(8)) & mul(to(F)(fin(160637252620944274919017121754547382625)), x, y))
   | ((i' = fin(4)) & (j' = fin(9)) & mul(to(F)(fin(11012598074146709803214876562745611290)), x, y))
   | ((i' = fin(4)) & (j' = fin(10)) & mul(to(F)(fin(174228529969458528790743590198430071844)), x, y))
   | ((i' = fin(4)) & (j' = fin(11)) & mul(to(F)(fin(61371981199875656819599259972429447964)), x, y))
   | ((i' = fin(5)) & (j' = fin(0)) & mul(to(F)(fin(932205185500733324287445520)), x, y))
   | ((i' = fin(5)) & (j' = fin(1)) & mul(to(F)(fin(247630352543198913028011787645857)), x, y))
   | ((i' = fin(5)) & (j' = fin(2)) & mul(to(F)(fin(49345320733417741860134440444314707760)), x, y))
   | ((i' = fin(5)) & (j' = fin(3)) & mul(to(F)(fin(176251666328384850512102527022193717671)), x, y))
   | ((i' = fin(5)) & (j' = fin(4)) & mul(to(F)(fin(196501644319430408311204515261141772488)), x, y))
   | ((i' = fin(5)) & (j' = fin(5)) & mul(to(F)(fin(237520966953967321978873168588776351274)), x, y))
   | ((i' = fin(5)) & (j' = fin(6)) & mul(to(F)(fin(30577614954253598217944397718714446366)), x, y))
   | ((i' = fin(5)) & (j' = fin(7)) & mul(to(F)(fin(72654116335514828621499920627040315608)), x, y))
   | ((i' = fin(5)) & (j' = fin(8)) & mul(to(F)(fin(185106036748085654378389419376807979208)), x, y))
   | ((i' = fin(5)) & (j' = fin(9)) & mul(to(F)(fin(57599179102889169698266869078073233616)), x, y))
   | ((i' = fin(5)) & (j' = fin(10)) & mul(to(F)(fin(78637412977600649399859952812485090613)), x, y))
   | ((i' = fin(5)) & (j' = fin(11)) & mul(to(F)(fin(234568309071105115573893876698994845369)), x, y))
   | ((i' = fin(6)) & (j' = fin(0)) & mul(to(F)(fin(270497897142226540387557440374568149157)), x, y))
   | ((i' = fin(6)) & (j' = fin(1)) & mul(to(F)(fin(270497896122864649163428059781721783537)), x, y))
   | ((i' = fin(6)) & (j' = fin(2)) & mul(to(F)(fin(270294809341811511991437808871999893274)), x, y))
   | ((i' = fin(6)) & (j' = fin(3)) & mul(to(F)(fin(242904614046680183869045781197682578523)), x, y))
   | ((i' = fin(6)) & (j' = fin(4)) & mul(to(F)(fin(127620545162027442727860381599664831034)), x, y))
   | ((i' = fin(6)) & (j' = fin(5)) & mul(to(F)(fin(136223763033073612095271354969808835539)), x, y))
   | ((i' = fin(6)) & (j' = fin(6)) & mul(to(F)(fin(128389049157378644121803807885942389521)), x, y))
   | ((i' = fin(6)) & (j' = fin(7)) & mul(to(F)(fin(186892272182265079427756281521599007811)), x, y))
   | ((i' = fin(6)) & (j' = fin(8)) & mul(to(F)(fin(152549162319134443184924500038001718265)), x, y))
   | ((i' = fin(6)) & (j' = fin(9)) & mul(to(F)(fin(187278682205336138000163153340731452590)), x, y))
   | ((i' = fin(6)) & (j' = fin(10)) & mul(to(F)(fin(149981014937172638577795839891045707265)), x, y))
   | ((i' = fin(6)) & (j' = fin(11)) & mul(to(F)(fin(213314679687547496751407122727913435165)), x, y))
   | ((i' = fin(7)) & (j' = fin(0)) & mul(to(F)(fin(5262325557309654266160)), x, y))
   | ((i' = fin(7)) & (j' = fin(1)) & mul(to(F)(fin(1394465398721024939122063140)), x, y))
   | ((i' = fin(7)) & (j' = fin(2)) & mul(to(F)(fin(277649216608545833578715747679120)), x, y))
   | ((i' = fin(7)) & (j' = fin(3)) & mul(to(F)(fin(51060870350938105279607305341639074457)), x, y))
   | ((i' = fin(7)) & (j' = fin(4)) & mul(to(F)(fin(249843727288899938843991787261853959939)), x, y))
   | ((i' = fin(7)) & (j' = fin(5)) & mul(to(F)(fin(148177967716086883599532453325502732630)), x, y))
   | ((i' = fin(7)) & (j' = fin(6)) & mul(to(F)(fin(34017596441668978095592385368017263581)), x, y))
   | ((i' = fin(7)) & (j' = fin(7)) & mul(to(F)(fin(237429496894753069779660541291255733409)), x, y))
   | ((i' = fin(7)) & (j' = fin(8)) & mul(to(F)(fin(205416241509620263352642265418316838327)), x, y))
   | ((i' = fin(7)) & (j' = fin(9)) & mul(to(F)(fin(166691363345727158419806909345998702400)), x, y))
   | ((i' = fin(7)) & (j' = fin(10)) & mul(to(F)(fin(29633304219561029069876955417589814148)), x, y))
   | ((i' = fin(7)) & (j' = fin(11)) & mul(to(F)(fin(59960451854851469244154718217643548146)), x, y))
   | ((i' = fin(8)) & (j' = fin(0)) & mul(to(F)(fin(270497897142230380133528088948492201290)), x, y))
   | ((i' = fin(8)) & (j' = fin(1)) & mul(to(F)(fin(270497897142229748560991946866221384937)), x, y))
   | ((i' = fin(8)) & (j' = fin(2)) & mul(to(F)(fin(270497897016709389109315597745995166147)), x, y))
   | ((i' = fin(8)) & (j' = fin(3)) & mul(to(F)(fin(270474827385032075275463843176934960057)), x, y))
   | ((i' = fin(8)) & (j' = fin(4)) & mul(to(F)(fin(191405474734255874214510138250140129758)), x, y))
   | ((i' = fin(8)) & (j' = fin(5)) & mul(to(F)(fin(51693229672320670809672089910197890320)), x, y))
   | ((i' = fin(8)) & (j' = fin(6)) & mul(to(F)(fin(132938248950896101581138848829497486696)), x, y))
   | ((i' = fin(8)) & (j' = fin(7)) & mul(to(F)(fin(81763227988148354260889924430236316486)), x, y))
   | ((i' = fin(8)) & (j' = fin(8)) & mul(to(F)(fin(227797655867664197714395290553625273445)), x, y))
   | ((i' = fin(8)) & (j' = fin(9)) & mul(to(F)(fin(258205150159071251923121625752286713367)), x, y))
   | ((i' = fin(8)) & (j' = fin(10)) & mul(to(F)(fin(101250296653549812544898566670359185080)), x, y))
   | ((i' = fin(8)) & (j' = fin(11)) & mul(to(F)(fin(3928742954495466133232276695420607757)), x, y))
   | ((i' = fin(9)) & (j' = fin(0)) & mul(to(F)(fin(360795585898440)), x, y))
   | ((i' = fin(9)) & (j' = fin(1)) & mul(to(F)(fin(93473955266375556873)), x, y))
   | ((i' = fin(9)) & (j' = fin(2)) & mul(to(F)(fin(18474501523657262996104920)), x, y))
   | ((i' = fin(9)) & (j' = fin(3)) & mul(to(F)(fin(3389238712694166948093293686530)), x, y))
   | ((i' = fin(9)) & (j' = fin(4)) & mul(to(F)(fin(607342200317660968552251408754164960)), x, y))
   | ((i' = fin(9)) & (j' = fin(5)) & mul(to(F)(fin(71831961707311634734376965578050883903)), x, y))
   | ((i' = fin(9)) & (j' = fin(6)) & mul(to(F)(fin(216938203501722508222399249214470444996)), x, y))
   | ((i' = fin(9)) & (j' = fin(7)) & mul(to(F)(fin(197196288549535648269008980050470529333)), x, y))
   | ((i' = fin(9)) & (j' = fin(8)) & mul(to(F)(fin(148435511960666019019380749364858353756)), x, y))
   | ((i' = fin(9)) & (j' = fin(9)) & mul(to(F)(fin(14620177553031289067936433598358562831)), x, y))
   | ((i' = fin(9)) & (j' = fin(10)) & mul(to(F)(fin(161737245393279068046646956116298397828)), x, y))
   | ((i' = fin(9)) & (j' = fin(11)) & mul(to(F)(fin(250504600788486310127216622537746208717)), x, y))
   | ((i' = fin(10)) & (j' = fin(0)) & mul(to(F)(fin(270497897142230380135924736749398408047)), x, y))
   | ((i' = fin(10)) & (j' = fin(1)) & mul(to(F)(fin(270497897142230380135920407149412487257)), x, y))
   | ((i' = fin(10)) & (j' = fin(2)) & mul(to(F)(fin(270497897142230379294645068112347798990)), x, y))
   | ((i' = fin(10)) & (j' = fin(3)) & mul(to(F)(fin(270497897142076897073175372875383027337)), x, y))
   | ((i' = fin(10)) & (j' = fin(4)) & mul(to(F)(fin(270497869688932521048355631439078301337)), x, y))
   | ((i' = fin(10)) & (j' = fin(5)) & mul(to(F)(fin(265618999524799081216024383802663420577)), x, y))
   | ((i' = fin(10)) & (j' = fin(6)) & mul(to(F)(fin(117360886387445563968423164798243610269)), x, y))
   | ((i' = fin(10)) & (j' = fin(7)) & mul(to(F)(fin(84201579929191027660860760886514142761)), x, y))
   | ((i' = fin(10)) & (j' = fin(8)) & mul(to(F)(fin(235378066771823424802061850391014192343)), x, y))
   | ((i' = fin(10)) & (j' = fin(9)) & mul(to(F)(fin(119585747261648492603805238962001723108)), x, y))
   | ((i' = fin(10)) & (j' = fin(10)) & mul(to(F)(fin(205626447533284380230656303333801843783)), x, y))
   | ((i' = fin(10)) & (j' = fin(11)) & mul(to(F)(fin(228996082811851538856733396890019569411)), x, y))
   | ((i' = fin(11)) & (j' = fin(0)) & mul(to(F)(fin(265720)), x, y))
   | ((i' = fin(11)) & (j' = fin(1)) & mul(to(F)(fin(52955405230)), x, y))
   | ((i' = fin(11)) & (j' = fin(2)) & mul(to(F)(fin(9741692640081640)), x, y))
   | ((i' = fin(11)) & (j' = fin(3)) & mul(to(F)(fin(1747282899667791058573)), x, y))
   | ((i' = fin(11)) & (j' = fin(4)) & mul(to(F)(fin(310804949350361548416923680)), x, y))
   | ((i' = fin(11)) & (j' = fin(5)) & mul(to(F)(fin(55133793282290501540016988429720)), x, y))
   | ((i' = fin(11)) & (j' = fin(6)) & mul(to(F)(fin(9771253933538933149312961201158497760)), x, y))
   | ((i' = fin(11)) & (j' = fin(7)) & mul(to(F)(fin(25641438083343074666925309720154835486)), x, y))
   | ((i' = fin(11)) & (j' = fin(8)) & mul(to(F)(fin(226095867352176659381889911970946268885)), x, y))
   | ((i' = fin(11)) & (j' = fin(9)) & mul(to(F)(fin(34801906359635051297660598100509655192)), x, y))
   | ((i' = fin(11)) & (j' = fin(10)) & mul(to(F)(fin(170534028057473600118956651245085295769)), x, y))
   | ((i' = fin(11)) & (j' = fin(11)) & mul(to(F)(fin(158836818700566859008272457628187068189)), x, y)).

-- y = x^alpha
def powerOfAlpha : F -> F -> Prop
  := \x : F => \y : F
  => some xx : F,
     mul(x, x, xx)
   & mul(xx, x, y).

def rescueBox0 : F -> F -> Prop
  := \x : F => \y : F
  => powerOfAlpha(y, x).

def rescueBox1 : F -> F -> Prop
  := \x : F => \y : F
  => powerOfAlpha(x, y).

def todo : Prop := 0N = 1N.

def sumJ : (J -> F) -> F -> Prop
  := \f : J -> F => \y : F
  => some s1 : F, some s2 : F, some s3 : F, some s4 : F,
     some s5 : F, some s6 : F, some s7 : F, some s8 : F,
     some s9 : F, some s10 : F,
     add(f(to(J)(fin(0))), f(to(J)(fin(1))), s1)
   & add(s1,  f(to(J)(fin(2))), s2)
   & add(s2,  f(to(J)(fin(3))), s3)
   & add(s3,  f(to(J)(fin(4))), s4)
   & add(s4,  f(to(J)(fin(5))), s5)
   & add(s5,  f(to(J)(fin(6))), s6)
   & add(s6,  f(to(J)(fin(7))), s7)
   & add(s7,  f(to(J)(fin(8))), s8)
   & add(s8,  f(to(J)(fin(9))), s9)
   & add(s9,  f(to(J)(fin(10))), s10)
   & add(s10, f(to(J)(fin(11))), y).

def rescueHashRound
   : ((Fin(12) -> F) -> (Fin(12) -> F) -> Prop)
  -> (Fin(12) -> F)
  -> (Fin(12) -> F)
  -> Prop
  := \addK : (Fin(12) -> F) -> (Fin(12) -> F) -> Prop
  => \xs : Fin(12) -> F
  => \ys : Fin(12) -> F
  => some xsBox : Fin(12) ->^12 F,
     some mxsBox : I ->^12 (J ->^12 F),
     some smxsBox : I ->^12 F,
     some inter : Fin(12) ->^12 F,
     some interBox : Fin(12) ->^12 F,
     some minterBox : I ->^12 (J ->^12 F),
     some sminterBox : I ->^12 F,
     (all i : Fin(12), rescueBox0(xs(i), xsBox(i)))
   & (all i : I, all j : J, mulM(i, j, xsBox(from(J)(j)), mxsBox(i, j)))
   & (all i : I, sumJ(mxsBox(i), smxsBox(i)))
   & addK((\x : Fin(12) => smxsBox(to(I)(x))), inter)
   & (all i : Fin(12), rescueBox1(inter(i), interBox(i)))
   & (all i : I, all j : J, mulM(i, j, interBox(from(J)(j)), minterBox(i, j)))
   & (all i : I, sumJ(minterBox(i), sminterBox(i)))
   & addK2((\x : Fin(12) => sminterBox(to(I)(x))), ys).

def rescueHash : Plaintext -> Hash -> Prop
  := \p : Plaintext => \h : Hash
  => let p' : Fin(12) -> F := from(Plaintext)(p);
     let h' : Fin(12) -> F := from(Hash)(h);
     some s0 : Fin(12) ->^12 F,
     some s1 : Fin(12) ->^12 F,
     some s2 : Fin(12) ->^12 F,
     some s3 : Fin(12) ->^12 F,
     some s4 : Fin(12) ->^12 F,
     some s5 : Fin(12) ->^12 F,
     some s6 : Fin(12) ->^12 F,
     some s7 : Fin(12) ->^12 F,
     some s8 : Fin(12) ->^12 F,
     some s9 : Fin(12) ->^12 F,
     some s10 : Fin(12) ->^12 F,
     addK0(p', s0)
   & rescueHashRound(addK1, s0, s1)
   & rescueHashRound(addK2, s1, s2)
   & rescueHashRound(addK3, s2, s3)
   & rescueHashRound(addK4, s3, s4)
   & rescueHashRound(addK5, s4, s5)
   & rescueHashRound(addK6, s5, s6)
   & rescueHashRound(addK7, s6, s7)
   & rescueHashRound(addK8, s7, s8)
   & rescueHashRound(addK9, s8, s9)
   & rescueHashRound(addK10, s9, h').

def hashesAreEqual : Hash -> Hash -> Prop
  := \x0 : Hash => \x1 : Hash
  => all i : Fin(12), from(Hash)(x0, i) = from(Hash)(x1, i).

-- Merkle commitments

-- Domain Length = 256 & Rounds = 4 => Last Codeword Length = 16
def codewordLength : N := 16N.

data Commitment ~= Hash.

data Index ~= Fin(16).

data Codeword ~= Index -> F.

data DepthIndex ~= Fin(8).

data AuthPath ~= DepthIndex -> Hash.

-- TODO: is this secure?
def mergeHashes : Hash -> Hash -> Hash -> Prop
  := \x0 : Hash => \x1 : Hash => \y : Hash
  => let x0' : Fin(12) -> F := from(Hash)(x0);
     let x1' : Fin(12) -> F := from(Hash)(x1);
     some x' : Fin(12) -> F,
     (all i : Fin(12), toN(x'(i)) = (toN(x0'(i)) +N toN(x1'(i))))
   & rescueHash(to(Plaintext)(x'), y).

def depthIndexIsEven : DepthIndex -> Prop
  := \x' : DepthIndex
  => let x : Fin(12) := from(DepthIndex)(x');
     (x = fin(0)) | (x = fin(2)) | (x = fin(4)) | (x = fin(6))
   | (x = fin(8)) | (x = fin(10)).

def verifyOpening : Commitment -> Index -> F -> AuthPath -> Prop
  := \c : Commitment => \i : Index => \x : F => \p : AuthPath
  => some f : DepthIndex ->^8 Hash,
     some h : Hash,
     let p' : Plaintext := to(Plaintext)((\j : Fin(12) => x));
     rescueHash(p', h)
   & hashesAreEqual(f(to(DepthIndex)(fin(0))), h)
   & (all j : Fin(7),
      let j' : DepthIndex := to(DepthIndex)(cast(j));
      let j'' : DepthIndex := to(DepthIndex)(cast(cast(j) +N 1N));
      let h' : Hash := f(j');
      let h'' : Hash := f(j'');
      let k : Hash := from(AuthPath)(p, j');
      (depthIndexIsEven(j') & mergeHashes(h', k, h''))
    | (!(depthIndexIsEven(j')) & mergeHashes(k, h', h''))).

def mergeCommitments : Commitment -> Commitment -> Commitment -> Prop
  := \a : Commitment => \b : Commitment => \c : Commitment
  => mergeHashes(from(Commitment)(a), from(Commitment)(b), from(Commitment)(c)).

def commitsTo1 : F -> Commitment -> Prop
  := \x : F => \c : Commitment
  => let h : Hash := from(Commitment)(c);
     let p : Plaintext := to(Plaintext)((\i : Fin(12) => x));
     rescueHash(p, h).

def commitsTo2 : (Fin(2) -> F) -> Commitment -> Prop
  := \f : Fin(2) -> F => \c : Commitment
  => some c0 : Commitment, some c1 : Commitment,
     mergeCommitments(c0, c1, c)
   & commitsTo1(f(fin(0)), c0)
   & commitsTo1(f(fin(1)), c1).

def commitsTo4 : (Fin(4) -> F) -> Commitment -> Prop
  := \f : Fin(4) -> F => \c : Commitment
  => let f0 : Fin(2) -> F := \x : Fin(2) => f(cast(x));
     let f1 : Fin(2) -> F := \x : Fin(2) => f(cast(cast(x) +N 2N));
     some c0 : Commitment, some c1 : Commitment,
     mergeCommitments(c0, c1, c)
   & commitsTo2(f0, c0)
   & commitsTo2(f1, c1).

def commitsTo8 : (Fin(8) -> F) -> Commitment -> Prop
  := \f : Fin(8) -> F => \c : Commitment
  => let f0 : Fin(4) -> F := \x : Fin(4) => f(cast(x));
     let f1 : Fin(4) -> F := \x : Fin(4) => f(cast(cast(x) +N 4N));
     some c0 : Commitment, some c1 : Commitment,
     mergeCommitments(c0, c1, c)
   & commitsTo4(f0, c0)
   & commitsTo4(f1, c1).

def commitsTo16 : (Fin(16) -> F) -> Commitment -> Prop
  := \f : Fin(16) -> F => \c : Commitment
  => let f0 : Fin(8) -> F := \x : Fin(8) => f(cast(x));
     let f1 : Fin(8) -> F := \x : Fin(8) => f(cast(cast(x) +N 8N));
     some c0 : Commitment, some c1 : Commitment,
     mergeCommitments(c0, c1, c)
   & commitsTo8(f0, c0)
   & commitsTo8(f1, c1).

def commitsTo : Codeword -> Commitment -> Prop
  := \w : Codeword => \c : Commitment
  => let w' : Fin(16) -> F := \x : Fin(16) => from(Codeword)(w, to(Index)(x));
     commitsTo16(w', c).

-- FRI

data Offset ~= F.

def offset1 : Offset := to(Offset)(to(F)(fin(85408008396924667383611388730472331217))).
def offset2 : Offset := to(Offset)(to(F)(fin(149224634558074809886965749048363504499))).
def offset4 : Offset := to(Offset)(to(F)(fin(196162427740603549034094478475071502895))).

data Omega ~= F.

def omega1 : Omega := to(Omega)(to(F)(fin(178902808384765167578311106676137348214))).
def omega2 : Omega := to(Omega)(to(F)(fin(65907963977709178563567092354521124432))).
def omega4 : Omega := to(Omega)(to(F)(fin(59478736836296470922896375673044043947))).

def domainLength : N := 256N.

def expansionFactor : N := 2N.

def numColinearityTests : N := 4N.

def numRounds : N := 4N.

def maxDegree : N := 8N.

data Commitments ~= Fin(4) -> Commitment.

data A ~= F.

data B ~= F.

data C ~= F.

data Query ~= A * B * C.

data QueryRound ~= Fin(3).

data IndexNumber ~= Fin(4).

data AAuthPath ~= AuthPath.

data BAuthPath ~= AuthPath.

data CAuthPath ~= AuthPath.

data AOpening ~= A * AAuthPath.

data BOpening ~= B * BAuthPath.

data COpening ~= C * CAuthPath.

data IndexOpenings ~= AOpening * BOpening * COpening.

data Openings ~= QueryRound -> IndexNumber -> IndexOpenings.

data Proof ~= Commitments * Codeword * Openings.

def commitments : Proof -> Fin(4) -> Commitment
  := \p : Proof => from(Commitments)(pi1(from(Proof)(p))).

def codeword : Proof -> Codeword
  := \p : Proof => pi1(pi2(from(Proof)(p))).

def openings : Proof -> QueryRound -> IndexNumber -> IndexOpenings
  := \p : Proof => from(Openings)(pi2(pi2(from(Proof)(p)))).

data TopLevelIndices ~= IndexNumber -> Index.

def getTopLevelIndex : TopLevelIndices -> IndexNumber -> Index
  := \is : TopLevelIndices => \i : IndexNumber
  => (from(TopLevelIndices)(is))(i).

data Alpha ~= F.

data Challenge ~= Alpha * Hash.

data Alphas ~= Fin(4) -> Challenge.

def getAlpha : Alphas -> Fin(4) -> Alpha
  := \as : Alphas => \x : Fin(4) => pi1(from(Challenge)((from(Alphas)(as))(x))).

def getLastChallenge : Alphas -> Challenge
  := \as : Alphas => (from(Alphas)(as))(fin(3)).

def getAlphaHash : Alphas -> Fin(4) -> Hash
  := \as : Alphas => \x : Fin(4) => pi2(from(Challenge)((from(Alphas)(as))(x))).

def checkAlphas : Proof -> Alphas -> Prop
  := \p : Proof => \a : Alphas
  => let f : Fin(4) -> Hash := \x : Fin(4) => from(Commitment)(commitments(p, x));
     let f' : Fin(4) -> F := \x : Fin(4) => (from(Hash)(f(x)))(fin(0));
     let g : Fin(4) -> F := \x : Fin(4) => from(Alpha)(getAlpha(a, x));
     let h : Fin(4) -> Hash := \x : Fin(4) => getAlphaHash(a, x);
     (all x : Fin(4), rescueHash(to(Plaintext)((\i : Fin(12) => g(x))), h(x)))
   & rescueHash(to(Plaintext)(from(Hash)(f(fin(0)))), h(fin(0)))
   & mergeHashes(h(fin(0)), f(fin(1)), h(fin(1)))
   & mergeHashes(h(fin(1)), f(fin(2)), h(fin(2)))
   & mergeHashes(h(fin(2)), f(fin(3)), h(fin(3))).

def sampleIndex : Hash -> Index -> Prop
  := \h : Hash => \i : Index
  => let x : N := toN((from(Hash)(h))(fin(0)));
     let i' : N := cast(from(Index)(i));
     some y : N < 67624474285557595033981184191762530305N,
     x = ((4N *N y) +N i').

def checkTopLevelIndices : Proof -> Challenge -> TopLevelIndices -> Prop
  := \p : Proof => \c : Challenge => \is : TopLevelIndices
  => some s : Hash, some c' : Commitment,
     commitsTo(codeword(p), c')
   & mergeHashes(pi2(from(Challenge)(c)), from(Commitment)(c'), s)
     -- TODO: doesn't the finiteness of the steps break completeness?
   & (some steps : List^128(Hash * Index),
      (all i : N < length(steps),
         let h : Hash := pi1(nth(steps, i));
         let j : Index := pi2(nth(steps, i));
         some h' : Hash,
         commitsTo1(to(F)(cast(i)), to(Commitment)(h'))
       & mergeHashes(s, h', h)
       & sampleIndex(h, j))
    & (all i : IndexNumber, some j : N < 128N,
         getTopLevelIndex(is, i) = pi2(nth(steps, cast(from(IndexNumber)(i)))))).

-- The given codeword is the codeword of a low degree polynomial.
def isLowDegree : Codeword -> Prop
  := \c : Codeword
  => let f : Fin(16) -> F := \x : Fin(16) => from(Codeword)(c, to(Index)(x));
     some p : Fin(16) ->^16 F,
     fft16(f, p)
   & (all i : Fin(16),
      let i' : N := cast(i);
      (i' <= 7N) | (f(i) = zero)).

def checkOmega : QueryRound -> Omega -> Prop
  := \r : QueryRound
  => \o : Omega
  => ((r = to(QueryRound)(fin(0))) & (o = omega1))
   | ((r = to(QueryRound)(fin(1))) & (o = omega2))
   | ((r = to(QueryRound)(fin(2))) & (o = omega4)).

def checkOffset : QueryRound -> Offset -> Prop
  := \r : QueryRound
  => \o : Offset
  => ((r = to(QueryRound)(fin(0))) & (o = offset1))
   & ((r = to(QueryRound)(fin(1))) & (o = offset2))
   & ((r = to(QueryRound)(fin(2))) & (o = offset4)).

def friRound
   : Proof
  -> QueryRound
  -> Omega
  -> Offset
  -> Alpha
  -> Commitment -> Commitment
  -> (IndexNumber -> IndexOpenings)
  -> Prop
  := \p : Proof
  => \r : QueryRound
  => \omega : Omega
  => \offset : Offset
  => \alpha : Alpha
  => \root : Commitment => \nextRoot : Commitment
  => \qs : IndexNumber -> IndexOpenings
  => todo.

def fri : Proof -> Prop
  := \p : Proof
  => some as : Alphas,
     some is : TopLevelIndices,
     isLowDegree(codeword(p))
   & commitsTo(codeword(p), commitments(p, fin(3)))
   & checkAlphas(p, as)
   & checkTopLevelIndices(p, getLastChallenge(as), is)
   & (all r : QueryRound,
      let r' : Fin(3) := from(QueryRound)(r);
      let alpha : Alpha := getAlpha(as, r');
      let root : Commitment := commitments(p, cast(r'));
      let nextRoot : Commitment := commitments(p, cast(cast(r') +N 1N));
      let qs : IndexNumber -> IndexOpenings := openings(p, r);
      some omega : Omega, some offset : Offset,
      checkOmega(r, omega) & checkOffset(r, offset)
    & friRound(p, r, omega, offset, alpha, root, nextRoot, qs)).
