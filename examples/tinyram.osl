-- 16-bit, 8-register TinyRAM 2.0 VM

data Word ~= Fin(65536).

data Register ~= Fin(8).

data Opcode ~= Fin(32).

data Bool ~= Fin(2).

data Immediate ~= Word.

data Arg1 ~= Register.

data Arg2 ~= Register.

data Arg3 ~= Register + Immediate.

data Instruction ~= Opcode * Arg1 * Arg2 * Arg3.

data Address ~= Word.

data Memory ~= Address -> Word.

data Program ~= Address -> Instruction.

data RegisterVals ~= Register -> Word.

data Flag ~= Bool.

data ProgramCounter ~= Address.

data State ~= ProgramCounter * Flag * Memory * Program.

def getProgramCounter : State -> ProgramCounter
  := \s : State => pi1(from(State)(s)).

def getFlag : State -> Flag
  := \s : State => pi1(pi2(from(State)(s))).

def getMemory : State -> Memory
  := \s : State => pi1(pi2(pi2(from(State)(s)))).

def getProgram : State -> Program
  := \s : State => pi2(pi2(pi2(from(State)(s)))).

data Step ~= ProgramCounter * Instruction * Immediate * RegisterVals * Flag * Address * Word.

data Trace ~= List^4096(Step).

def todo : Prop := 0N = 1N.

def traceIsValid : Trace -> Prop
  := \t : Trace => todo.

def traceAccepts : Trace -> Prop
  := \t : Trace => todo.

def memoryIsConsistentWithTrace : Trace -> Memory -> Prop
  := \t : Trace => \m : Memory => todo.

def programIsConsistentWithTrace : Trace -> Program -> Prop
  := \t : Trace => \p : Program => todo.

def programAccepts : Program -> Memory -> Prop
  := \p : Program => \m : Memory
  => some t : Trace,
     traceIsValid(t)
   & traceAccepts(t)
   & memoryIsConsistentWithTrace(t, m)
   & programIsConsistentWithTrace(t, p).
