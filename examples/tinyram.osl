-- 16-bit word, 8-register TinyRAM 2.0 VM

data Word ~= Fin(65536).

def zero : Word := to(Word)(fin(0)).

def toN : Word -> N
  := \w : Word => cast(from(Word)(w)).

def toZU : Word -> Z
  := \w : Word => cast(from(Word)(w)).

def toZS : Word -> Z -> Prop
  := \w : Word => \z : Z
  => some u : Z < 32768Z, some s : Z < 2Z,
     (toZU(w) = (u +Z (32768Z *Z s)))
   & (z = (u +Z (-32768Z *Z s))).

def fromN : N -> Word
  := \x : N => to(Word)(cast(x)).

data Register ~= Fin(8).

data Opcode ~= Fin(32).

def opAnd    : Opcode := to(Opcode)(fin(0)).
def opOr     : Opcode := to(Opcode)(fin(1)).
def opXor    : Opcode := to(Opcode)(fin(2)).
def opNot    : Opcode := to(Opcode)(fin(3)).
def opAdd    : Opcode := to(Opcode)(fin(4)).
def opSub    : Opcode := to(Opcode)(fin(5)).
def opMull   : Opcode := to(Opcode)(fin(6)).
def opUmulh  : Opcode := to(Opcode)(fin(7)).
def opSmulh  : Opcode := to(Opcode)(fin(8)).
def opUdiv   : Opcode := to(Opcode)(fin(9)).
def opUmod   : Opcode := to(Opcode)(fin(10)).
def opShl    : Opcode := to(Opcode)(fin(11)).
def opShr    : Opcode := to(Opcode)(fin(12)).
def opCmpe   : Opcode := to(Opcode)(fin(13)).
def opCmpa   : Opcode := to(Opcode)(fin(14)).
def opCmpae  : Opcode := to(Opcode)(fin(15)).
def opCmpg   : Opcode := to(Opcode)(fin(16)).
def opCmpge  : Opcode := to(Opcode)(fin(17)).
def opMov    : Opcode := to(Opcode)(fin(18)).
def opCmov   : Opcode := to(Opcode)(fin(19)).
def opJmp    : Opcode := to(Opcode)(fin(20)).
def opCjmp   : Opcode := to(Opcode)(fin(21)).
def opCnjmp  : Opcode := to(Opcode)(fin(22)).
def opStoreb : Opcode := to(Opcode)(fin(26)).
def opLoadb  : Opcode := to(Opcode)(fin(27)).
def opStorew : Opcode := to(Opcode)(fin(28)).
def opLoadw  : Opcode := to(Opcode)(fin(29)).
def opAnswer : Opcode := to(Opcode)(fin(31)).

data Bool ~= Fin(2).

def true  : Bool := to(Bool)(fin(1)).
def false : Bool := to(Bool)(fin(0)).

def boolToN : Bool -> N
  := \x : Bool => cast(from(Bool)(x)).

data Immediate ~= Word.

data Arg1 ~= Register.

data Arg2 ~= Register.

data Arg3 ~= Register + Immediate.

data Instruction ~= Opcode * Arg1 * Arg2 * Arg3.

def getOpcode : Instruction -> Opcode
  := \x : Instruction => pi1(from(Instruction)(x)).

def isStore : Instruction -> Prop
  := \x : Instruction
  => let o : Opcode := getOpcode(x);
     (o = opStoreb) | (o = opStorew).

def isLoad : Instruction -> Prop
  := \x : Instruction
  => let o : Opcode := getOpcode(x);
     (o = opLoadb) | (o = opLoadw).

def getArg1 : Instruction -> Register
  := \x : Instruction => from(Arg1)(pi1(pi2(from(Instruction)(x)))).

def getArg2 : Instruction -> Register
  := \x : Instruction => from(Arg2)(pi1(pi2(pi2(from(Instruction)(x))))).

def getArg3 : Instruction -> (Register + Immediate)
  := \x : Instruction => from(Arg3)(pi2(pi2(pi2(from(Instruction)(x))))).

data Address ~= Word.

def addrToN : Address -> N
  := \a : Address => toN(from(Address)(a)).

data Memory ~= Address -> Word.

def getMemoryValue : Memory -> Address -> Word
  := \m : Memory => \a : Address
  => from(Memory)(m, a).

data Program ~= Address -> Instruction.

def getProgramInstruction : Program -> Address -> Instruction
  := \p : Program => \a : Address
  => from(Program)(p, a).

data RegisterValues ~= Register -> Word.

data Flag ~= Bool.

def flagZero : Flag := to(Flag)(false).

def flagOne : Flag := to(Flag)(true).

def flagToN : Flag -> N
  := \f : Flag => cast(from(Bool)(from(Flag)(f))).

def flagToZ : Flag -> Z
  := \f : Flag => cast(from(Bool)(from(Flag)(f))).

data ProgramCounter ~= Address.

data InitialState ~= Memory * Program.

def getMemory : InitialState -> Memory
  := \s : InitialState => pi1(from(InitialState)(s)).

def getProgram : InitialState -> Program
  := \s : InitialState => pi2(from(InitialState)(s)).

data Time ~= Fin(4096).

def isBefore : Time -> Time -> Prop
  := \t0 : Time => \t1 : Time
  => (cast(from(Time)(t0)) +N 1N) <= cast(from(Time)(t1)).

data StoredWord ~= Word.

data LinkedTime ~= Time.

data LinkedValue ~= Word.

data Step ~=
    ProgramCounter
  * Instruction
  * RegisterValues
  * Flag
  * Address
  * StoredWord
  * LinkedValue.

def getProgramCounter : Step -> Address
  := \s : Step => from(ProgramCounter)(pi1(from(Step)(s))).

def getStepInstruction : Step -> Instruction
  := \s : Step => pi1(pi2(from(Step)(s))).

def getRegisterValues : Step -> RegisterValues
  := \s : Step => pi1(pi2(pi2(from(Step)(s)))).

def getRegisterValue : Step -> Register -> Word
  := \s : Step => \r : Register
  => (from(RegisterValues)(getRegisterValues(s)))(r).

def getFlag : Step -> Flag
  := \s : Step => pi1(pi2(pi2(pi2(from(Step)(s))))).

def getAddress : Step -> Address
  := \s : Step => pi1(pi2(pi2(pi2(pi2(from(Step)(s)))))).

def getStoredWord : Step -> Word
  := \s : Step => from(StoredWord)(pi1(pi2(pi2(pi2(pi2(pi2(from(Step)(s)))))))).

def getLinkedValue : Step -> Word
  := \s : Step => from(LinkedValue)(pi2(pi2(pi2(pi2(pi2(pi2(from(Step)(s)))))))).

def getArg3Value : Step -> Word
  := \s : Step
  => ((\r : Register => getRegisterValue(s, r))
       + (\i : Immediate => from(Immediate)(i)))
       (getArg3(getStepInstruction(s))).

data Steps ~= List^4096(Step).

data Links ~= Time <->^4096 Time.

data Trace ~= Steps * Links.

def getSteps : Trace -> List^4096(Step)
  := \T : Trace => from(Steps)(pi1(from(Trace)(T))).

def getLinks : Trace -> (Time <->^4096 Time)
  := \T : Trace => from(Links)(pi2(from(Trace)(T))).

def getStep : Trace -> Time -> Step
  := \T : Trace => \t : Time
  => nth(getSteps(T), cast(from(Time)(t))).

def isFirstStepAccessingGivenAddress : Trace -> Time -> Prop
  := \T : Trace => \t : Time
  => t <= getLinks(T, t).

def linksAreOrdered : Trace -> Prop
  := \T : Trace
  => let ss : List^4096(Step) := getSteps(T);
     some finalAccesses : Address ->^4096 Time,
     all i : N < length(ss),
     let s : Step := nth(ss, i);
     let t : Time := to(Time)(cast(i));
     let t' : Time := getLinks(T, t);
     let a : Address := getAddress(s);
     (t' = finalAccesses(a))
       | isBefore(t', t).

def doesNotAnswerPrematurely : Trace -> Prop
  := \T : Trace
  => let ss : List^4096(Step) := getSteps(T);
     all i : N < length(ss),
     let s : Step := nth(ss, i);
     ((i +N 1N) = length(ss))
   | !(getOpcode(getStepInstruction(s)) = opAnswer).

def isEvenBits : Word -> Prop
  := {to(Word)(fin(0)), to(Word)(fin(2)), to(Word)(fin(8)), to(Word)(fin(10)), to(Word)(fin(32)), to(Word)(fin(34)), to(Word)(fin(40)), to(Word)(fin(42)), to(Word)(fin(128)), to(Word)(fin(130)), to(Word)(fin(136)), to(Word)(fin(138)), to(Word)(fin(160)), to(Word)(fin(162)), to(Word)(fin(168)), to(Word)(fin(170)), to(Word)(fin(512)), to(Word)(fin(514)), to(Word)(fin(520)), to(Word)(fin(522)), to(Word)(fin(544)), to(Word)(fin(546)), to(Word)(fin(552)), to(Word)(fin(554)), to(Word)(fin(640)), to(Word)(fin(642)), to(Word)(fin(648)), to(Word)(fin(650)), to(Word)(fin(672)), to(Word)(fin(674)), to(Word)(fin(680)), to(Word)(fin(682)), to(Word)(fin(2048)), to(Word)(fin(2050)), to(Word)(fin(2056)), to(Word)(fin(2058)), to(Word)(fin(2080)), to(Word)(fin(2082)), to(Word)(fin(2088)), to(Word)(fin(2090)), to(Word)(fin(2176)), to(Word)(fin(2178)), to(Word)(fin(2184)), to(Word)(fin(2186)), to(Word)(fin(2208)), to(Word)(fin(2210)), to(Word)(fin(2216)), to(Word)(fin(2218)), to(Word)(fin(2560)), to(Word)(fin(2562)), to(Word)(fin(2568)), to(Word)(fin(2570)), to(Word)(fin(2592)), to(Word)(fin(2594)), to(Word)(fin(2600)), to(Word)(fin(2602)), to(Word)(fin(2688)), to(Word)(fin(2690)), to(Word)(fin(2696)), to(Word)(fin(2698)), to(Word)(fin(2720)), to(Word)(fin(2722)), to(Word)(fin(2728)), to(Word)(fin(2730)), to(Word)(fin(8192)), to(Word)(fin(8194)), to(Word)(fin(8200)), to(Word)(fin(8202)), to(Word)(fin(8224)), to(Word)(fin(8226)), to(Word)(fin(8232)), to(Word)(fin(8234)), to(Word)(fin(8320)), to(Word)(fin(8322)), to(Word)(fin(8328)), to(Word)(fin(8330)), to(Word)(fin(8352)), to(Word)(fin(8354)), to(Word)(fin(8360)), to(Word)(fin(8362)), to(Word)(fin(8704)), to(Word)(fin(8706)), to(Word)(fin(8712)), to(Word)(fin(8714)), to(Word)(fin(8736)), to(Word)(fin(8738)), to(Word)(fin(8744)), to(Word)(fin(8746)), to(Word)(fin(8832)), to(Word)(fin(8834)), to(Word)(fin(8840)), to(Word)(fin(8842)), to(Word)(fin(8864)), to(Word)(fin(8866)), to(Word)(fin(8872)), to(Word)(fin(8874)), to(Word)(fin(10240)), to(Word)(fin(10242)), to(Word)(fin(10248)), to(Word)(fin(10250)), to(Word)(fin(10272)), to(Word)(fin(10274)), to(Word)(fin(10280)), to(Word)(fin(10282)), to(Word)(fin(10368)), to(Word)(fin(10370)), to(Word)(fin(10376)), to(Word)(fin(10378)), to(Word)(fin(10400)), to(Word)(fin(10402)), to(Word)(fin(10408)), to(Word)(fin(10410)), to(Word)(fin(10752)), to(Word)(fin(10754)), to(Word)(fin(10760)), to(Word)(fin(10762)), to(Word)(fin(10784)), to(Word)(fin(10786)), to(Word)(fin(10792)), to(Word)(fin(10794)), to(Word)(fin(10880)), to(Word)(fin(10882)), to(Word)(fin(10888)), to(Word)(fin(10890)), to(Word)(fin(10912)), to(Word)(fin(10914)), to(Word)(fin(10920)), to(Word)(fin(10922)), to(Word)(fin(32768)), to(Word)(fin(32770)), to(Word)(fin(32776)), to(Word)(fin(32778)), to(Word)(fin(32800)), to(Word)(fin(32802)), to(Word)(fin(32808)), to(Word)(fin(32810)), to(Word)(fin(32896)), to(Word)(fin(32898)), to(Word)(fin(32904)), to(Word)(fin(32906)), to(Word)(fin(32928)), to(Word)(fin(32930)), to(Word)(fin(32936)), to(Word)(fin(32938)), to(Word)(fin(33280)), to(Word)(fin(33282)), to(Word)(fin(33288)), to(Word)(fin(33290)), to(Word)(fin(33312)), to(Word)(fin(33314)), to(Word)(fin(33320)), to(Word)(fin(33322)), to(Word)(fin(33408)), to(Word)(fin(33410)), to(Word)(fin(33416)), to(Word)(fin(33418)), to(Word)(fin(33440)), to(Word)(fin(33442)), to(Word)(fin(33448)), to(Word)(fin(33450)), to(Word)(fin(34816)), to(Word)(fin(34818)), to(Word)(fin(34824)), to(Word)(fin(34826)), to(Word)(fin(34848)), to(Word)(fin(34850)), to(Word)(fin(34856)), to(Word)(fin(34858)), to(Word)(fin(34944)), to(Word)(fin(34946)), to(Word)(fin(34952)), to(Word)(fin(34954)), to(Word)(fin(34976)), to(Word)(fin(34978)), to(Word)(fin(34984)), to(Word)(fin(34986)), to(Word)(fin(35328)), to(Word)(fin(35330)), to(Word)(fin(35336)), to(Word)(fin(35338)), to(Word)(fin(35360)), to(Word)(fin(35362)), to(Word)(fin(35368)), to(Word)(fin(35370)), to(Word)(fin(35456)), to(Word)(fin(35458)), to(Word)(fin(35464)), to(Word)(fin(35466)), to(Word)(fin(35488)), to(Word)(fin(35490)), to(Word)(fin(35496)), to(Word)(fin(35498)), to(Word)(fin(40960)), to(Word)(fin(40962)), to(Word)(fin(40968)), to(Word)(fin(40970)), to(Word)(fin(40992)), to(Word)(fin(40994)), to(Word)(fin(41000)), to(Word)(fin(41002)), to(Word)(fin(41088)), to(Word)(fin(41090)), to(Word)(fin(41096)), to(Word)(fin(41098)), to(Word)(fin(41120)), to(Word)(fin(41122)), to(Word)(fin(41128)), to(Word)(fin(41130)), to(Word)(fin(41472)), to(Word)(fin(41474)), to(Word)(fin(41480)), to(Word)(fin(41482)), to(Word)(fin(41504)), to(Word)(fin(41506)), to(Word)(fin(41512)), to(Word)(fin(41514)), to(Word)(fin(41600)), to(Word)(fin(41602)), to(Word)(fin(41608)), to(Word)(fin(41610)), to(Word)(fin(41632)), to(Word)(fin(41634)), to(Word)(fin(41640)), to(Word)(fin(41642)), to(Word)(fin(43008)), to(Word)(fin(43010)), to(Word)(fin(43016)), to(Word)(fin(43018)), to(Word)(fin(43040)), to(Word)(fin(43042)), to(Word)(fin(43048)), to(Word)(fin(43050)), to(Word)(fin(43136)), to(Word)(fin(43138)), to(Word)(fin(43144)), to(Word)(fin(43146)), to(Word)(fin(43168)), to(Word)(fin(43170)), to(Word)(fin(43176)), to(Word)(fin(43178)), to(Word)(fin(43520)), to(Word)(fin(43522)), to(Word)(fin(43528)), to(Word)(fin(43530)), to(Word)(fin(43552)), to(Word)(fin(43554)), to(Word)(fin(43560)), to(Word)(fin(43562)), to(Word)(fin(43648)), to(Word)(fin(43650)), to(Word)(fin(43656)), to(Word)(fin(43658)), to(Word)(fin(43680)), to(Word)(fin(43682)), to(Word)(fin(43688)), to(Word)(fin(43690))}.

data EvenBits ~= Word.

data OddBits ~= Word.

def decomposesAs : Word -> EvenBits -> OddBits -> Prop
  := \w : Word => \e : EvenBits => \o : OddBits
  => let e' : Word := from(EvenBits)(e);
     let o' : Word := from(OddBits)(o);
     isEvenBits(e')
   & isEvenBits(o')
   & (toN(w) = ((2N *N toN(o')) +N toN(e'))).

def and : Word -> Word -> Word -> Prop
  := \a : Word => \b : Word => \c : Word
  => some ae : Word, some ao : Word,
     some be : Word, some bo : Word,
     some oe : Word, some oo : Word,
     some ee : Word, some eo : Word,
     decomposesAs(ae, to(EvenBits)(ae), to(OddBits)(ao))
   & decomposesAs(be, to(EvenBits)(be), to(OddBits)(bo))
   & isEvenBits(oe) & isEvenBits(oo)
   & isEvenBits(ee) & isEvenBits(eo)
   & ((toN(ao) +N toN(bo)) = ((2N *N toN(oo)) +N toN(oe)))
   & ((toN(ae) +N toN(be)) = ((2N *N toN(eo)) +N toN(ee)))
   & (toN(c) = ((2N *N toN(oo)) +N toN(eo))).

def xor : Word -> Word -> Word -> Prop
  := \a : Word => \b : Word => \c : Word
  => some ae : Word, some ao : Word,
     some be : Word, some bo : Word,
     some oe : Word, some oo : Word,
     some ee : Word, some eo : Word,
     decomposesAs(ae, to(EvenBits)(ae), to(OddBits)(ao))
   & decomposesAs(be, to(EvenBits)(be), to(OddBits)(bo))
   & isEvenBits(oe) & isEvenBits(oo)
   & isEvenBits(ee) & isEvenBits(eo)
   & ((toN(ao) +N toN(bo)) = ((2N *N toN(oo)) +N toN(oe)))
   & ((toN(ae) +N toN(be)) = ((2N *N toN(eo)) +N toN(ee)))
   & (toN(c) = ((2N *N toN(oe)) +N toN(ee))).

def or : Word -> Word -> Word -> Prop
  := \a : Word => \b : Word => \c : Word
  => some ae : Word, some ao : Word,
     some be : Word, some bo : Word,
     some oe : Word, some oo : Word,
     some ee : Word, some eo : Word,
     decomposesAs(ae, to(EvenBits)(ae), to(OddBits)(ao))
   & decomposesAs(be, to(EvenBits)(be), to(OddBits)(bo))
   & isEvenBits(oe) & isEvenBits(oo)
   & isEvenBits(ee) & isEvenBits(eo)
   & ((toN(ao) +N toN(bo)) = ((2N *N toN(oo)) +N toN(oe)))
   & ((toN(ae) +N toN(be)) = ((2N *N toN(eo)) +N toN(ee)))
   & (toN(c) = (((2N *N toN(oo)) +N toN(eo))
             +N ((2N *N toN(oe)) +N toN(ee)))).

def not : Word -> Word -> Prop
  := \a : Word => \b : Word
  => xor(a, to(Word)(fin(65535)), b).

def add : Word -> Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \c : Word => \f : Flag
  => let overflowBit : N := 65536N *N cast(from(Bool)(from(Flag)(f)));
     (toN(c) +N overflowBit) = (toN(a) +N toN(b)).

def sub : Word -> Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \c : Word => \f : Flag
  => let carryBit : Z := 65536Z *Z (1Z +Z (-1Z *Z flagToZ(f)));
     (toZU(b) +Z 65536Z +Z (-1Z *Z toZU(a))) = (toZU(c) +Z carryBit).

def mull : Word -> Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \c : Word => \f : Flag
  => some d : Word,
     ((toN(a) *N toN(b)) = (toN(c) +N (65536N *N toN(d))))
   & ((f = flagZero) <-> (d = zero)).

def umulh : Word -> Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \c : Word => \f : Flag
  => some d : Word,
     ((toN(a) *N toN(b)) = (toN(d) +N (65536N *N toN(c))))
   & ((f = flagZero) <-> (c = zero)).

def smulh : Word -> Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \c : Word => \f : Flag
  => some au : N < 32768N, some bu : N < 32768N,
     some as : Z < 2Z, some bs : Z < 2Z,
     some d : Word,
     toZS(a, (as *Z -1Z) *Z cast(au))
   & toZS(b, (bs *Z -1Z) *Z cast(bu))
   & ((toN(d) +N (65536N *N toN(c))) = (au *N bu)).

def udiv : Word -> Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \c : Word => \f : Flag
  => (((a = zero) & (c = zero) & (f = flagOne)))
   | (!(a = zero) & (f = flagZero)
      & (some r : N < toN(a), toN(b) = ((toN(a) *N toN(c)) +N r))).

def umod : Word -> Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \c : Word => \f : Flag
  => (((a = zero) & (c = zero) & (f = flagOne)))
   | (!(a = zero) & (f = flagZero) & ((toN(c) +N 1N) <= toN(a))
     & (some d : Word, toN(b) = ((toN(a) *N toN(d)) +N toN(c)))).

def cmpg : Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \f : Flag
  => some au : N < 32768N, some bu : N < 32768N,
     some as : Z < 2Z, some bs : Z < 2Z,
     some d : Word,
     let az : Z := cast(au) *Z (as *Z -1Z);
     let bz : Z := cast(bu) *Z (bs *Z -1Z);
     toZS(a, az) & toZS(b, bz)
   & ((f = flagOne) <-> ((bz +Z 1Z) <= az)).

def cmpge : Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \f : Flag
  => some au : N < 32768N, some bu : N < 32768N,
     some as : Z < 2Z, some bs : Z < 2Z,
     some d : Word,
     let az : Z := cast(au) *Z (as *Z -1Z);
     let bz : Z := cast(bu) *Z (bs *Z -1Z);
     toZS(a, az) & toZS(b, bz)
   & ((f = flagOne) <-> (bz <= az)).

-- n => 2^n
def power : N -> N
  := [0N => 1N, 1N => 2N, 2N => 4N, 3N => 8N, 4N => 16N, 5N => 32N, 6N => 64N, 7N => 128N, 8N => 256N, 9N => 512N, 10N => 1024N, 11N => 2048N, 12N => 4096N, 13N => 8192N, 14N => 16384N, 15N => 32768N].

def shl : Word -> Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \c : Word => \f : Flag
  => let aMsb : N := flagToN(f) *N 65535N;
     some aLsbs : Word, (toN(a) = (toN(aLsbs) +N aMsb))
   & (some d : Word, (((toN(d) *N 65536N) +N toN(c)) = (toN(a) *N power(toN(b))))).

def shr : Word -> Word -> Word -> Flag -> Prop
  := \a : Word => \b : Word => \c : Word => \f : Flag
  => let aLsb : N := flagToN(f);
     some aMsbs : Word, (toN(a) = (aLsb +N (2N *N toN(aMsbs))))
   & (some d : Word, (((toN(c) *N power(toN(b))) +N toN(d)) = toN(a))).

def incrementPC : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => addrToN(getProgramCounter(s1)) = (addrToN(getProgramCounter(s0)) +N 1N).

def getRi : Step -> Step -> Word
  := \s0 : Step => \s1 : Step
  => getRegisterValue(s1, getArg1(getStepInstruction(s0))).

def getRj : Step -> Word
  := \s : Step
  => getRegisterValue(s, getArg2(getStepInstruction(s))).

def getA : Step -> Word
  := \s : Step
  => ((\r : Register => getRegisterValue(s, r))
      + (\i : Immediate => from(Immediate)(i)))
      (getArg3(getStepInstruction(s))).

def preserveRegisters : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => all r : Register,
     (getArg1(getStepInstruction(s0)) = r)
   | (getRegisterValue(s0, r) = getRegisterValue(s1, r)).

def transitionAnd : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & and(getRj(s0), getA(s0), getRi(s0, s1))
   & (getFlag(s1) = flagZero).

def transitionOr : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & or(getRj(s0), getA(s0), getRi(s0, s1))
   & (getFlag(s1) = flagZero).

def transitionXor : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & xor(getRj(s0), getA(s0), getRi(s0, s1))
   & (getFlag(s1) = flagZero).

def transitionNot : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & not(getA(s0), getRi(s0, s1))
   & (getFlag(s1) = flagZero).

def transitionAdd : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & add(getRj(s0), getA(s0), getRi(s0, s1), getFlag(s1)).

def transitionSub : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & sub(getRj(s0), getA(s0), getRi(s0, s1), getFlag(s1)).

def transitionMull : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & mull(getRj(s0), getA(s0), getRi(s0, s1), getFlag(s1)).

def transitionUmulh : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & umulh(getRj(s0), getA(s0), getRi(s0, s1), getFlag(s1)).

def transitionSmulh : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & smulh(getRj(s0), getA(s0), getRi(s0, s1), getFlag(s1)).

def transitionUdiv : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & udiv(getRj(s0), getA(s0), getRi(s0, s1), getFlag(s1)).

def transitionUmod : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & umod(getRj(s0), getA(s0), getRi(s0, s1), getFlag(s1)).

def transitionShl : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & shl(getRj(s0), getA(s0), getRi(s0, s1), getFlag(s1)).

def transitionShr : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & shr(getRj(s0), getA(s0), getRi(s0, s1), getFlag(s1)).

def transitionCmpe : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getRi(s0, s0) = getRi(s0, s1))
   & ((getFlag(s1) = flagOne) <-> (getRi(s0, s0) = getA(s0))).

def transitionCmpa : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getRi(s0, s0) = getRi(s0, s1))
   & ((getFlag(s1) = flagOne) <-> ((toN(getA(s0)) +N 1N) <= toN(getRi(s0, s0)))).

def transitionCmpae : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getRi(s0, s0) = getRi(s0, s1))
   & ((getFlag(s1) = flagOne) <-> (toN(getA(s0)) <= toN(getRi(s0, s0)))).

def transitionCmpg : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getRi(s0, s0) = getRi(s0, s1))
   & cmpg(getRi(s0, s0), getA(s0), getFlag(s1)).

def transitionCmpge : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getRi(s0, s0) = getRi(s0, s1))
   & cmpge(getRi(s0, s0), getA(s0), getFlag(s1)).

def transitionMov : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getRi(s0, s1) = getA(s0))
   & (getFlag(s1) = getFlag(s0)).

def transitionCmov : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & ( ((getFlag(s0) = flagZero) & (getRi(s0, s1) = getRi(s0, s0)))
     | ((getFlag(s0) = flagOne) & (getRi(s0, s1) = getA(s0))) ).

def transitionJmp : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => (getFlag(s1) = getFlag(s0)) & (getRi(s0, s1) = getRi(s0, s0))
   & (getProgramCounter(s1) = to(Address)(getA(s0))).

def transitionCjmp : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => (getFlag(s1) = getFlag(s0)) & (getRi(s0, s1) = getRi(s0, s0))
   & ( ((getFlag(s0) = flagZero) & incrementPC(s0, s1))
     | ((getFlag(s0) = flagOne) & (getProgramCounter(s1) = to(Address)(getA(s0)))) ).

def transitionCnjmp : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => (getFlag(s1) = getFlag(s0)) & (getRi(s0, s1) = getRi(s0, s0))
   & ( ((getFlag(s0) = flagOne) & incrementPC(s0, s1))
     | ((getFlag(s0) = flagZero) & (getProgramCounter(s1) = to(Address)(getA(s0)))) ).

data Byte ~= Fin(256).

def bToN : Byte -> N
  := \x : Byte => cast(from(Byte)(x)).

def bytes : Word -> Byte -> Byte -> Prop
  := \w : Word => \b0 : Byte => \b1 : Byte
  => toN(w) = (bToN(b0) +N (256N *N bToN(b1))).

def transitionStoreb : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getFlag(s1) = getFlag(s0))
   & (let ri : Word := getRi(s0, s0);
      let mv : Word := getStoredWord(s0);
      let mv' : Word := getLinkedValue(s0);
      let a : Address := getAddress(s0);
      some aLsbIsOne : Bool, some aMsbs : Word,
      some ri0 : Byte, some ri1 : Byte,
      some mv0 : Byte, some mv1 : Byte,
      ((boolToN(aLsbIsOne) +N (2N *N toN(aMsbs))) = toN(from(Address)(a)))
    & bytes(ri, ri0, ri1)
    & bytes(mv', mv0, mv1)
    & ( ((aLsbIsOne = false) & bytes(mv, ri0, mv1))
      | ((aLsbIsOne = true) & bytes(mv, mv0, ri0)) )).

def transitionLoadb : Trace -> Time -> Step -> Step -> Prop
  := \T : Trace => \t : Time => \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getFlag(s1) = getFlag(s0))
   & (getAddress(s0) = to(Address)(getA(s0)))
   & (isFirstStepAccessingGivenAddress(T, t)
      | (getStoredWord(s0) = getLinkedValue(s0)))
   & (let ri : Word := getRi(s0, s1);
      let mv : Word := getStoredWord(s0);
      let mv' : Word := getLinkedValue(s0);
      let a : Address := getAddress(s0);
      some aLsbIsOne : Bool, some aMsbs : Word,
      some mv0 : Byte, some mv1 : Byte,
      ((boolToN(aLsbIsOne) +N (2N *N toN(aMsbs))) = toN(from(Address)(a)))
    & bytes(mv', mv0, mv1) & (mv = mv')
    & ( ((aLsbIsOne = false) & (ri = to(Word)(cast(from(Byte)(mv0)))))
      | ((aLsbIsOne = true) & (ri = to(Word)(cast(from(Byte)(mv1))))) )).

def transitionStorew : Step -> Step -> Prop
  := \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getFlag(s1) = getFlag(s0))
   & (getAddress(s0) = to(Address)(getA(s0)))
   & (getStoredWord(s0) = getRi(s0, s0)).

def transitionLoadw : Trace -> Time -> Step -> Step -> Prop
  := \T : Trace => \t : Time => \s0 : Step => \s1 : Step
  => incrementPC(s0, s1)
   & (getFlag(s1) = getFlag(s0))
   & (getAddress(s0) = to(Address)(getA(s0)))
   & (getRi(s0, s1) = getStoredWord(s0))
   & (isFirstStepAccessingGivenAddress(T, t)
      | (getStoredWord(s0) = getLinkedValue(s0))).

def transition : Trace -> Time -> Step -> Step -> Prop
  := \T : Trace => \t : Time => \s0 : Step => \s1 : Step
  => preserveRegisters(s0, s1)
   & (let inst : Instruction := getStepInstruction(s0);
     let op : Opcode := getOpcode(inst);
     ((op = opAnd)    & transitionAnd(s0, s1))
   | ((op = opOr)     & transitionOr(s0, s1))
   | ((op = opXor)    & transitionXor(s0, s1))
   | ((op = opNot)    & transitionNot(s0, s1))
   | ((op = opAdd)    & transitionAdd(s0, s1))
   | ((op = opSub)    & transitionSub(s0, s1))
   | ((op = opMull)   & transitionMull(s0, s1))
   | ((op = opUmulh)  & transitionUmulh(s0, s1))
   | ((op = opSmulh)  & transitionSmulh(s0, s1))
   | ((op = opUdiv)   & transitionUdiv(s0, s1))
   | ((op = opUmod)   & transitionUmod(s0, s1))
   | ((op = opShl)    & transitionShl(s0, s1))
   | ((op = opShr)    & transitionShr(s0, s1))
   | ((op = opCmpe)   & transitionCmpe(s0, s1))
   | ((op = opCmpg)   & transitionCmpg(s0, s1))
   | ((op = opCmpge)  & transitionCmpge(s0, s1))
   | ((op = opMov)    & transitionMov(s0, s1))
   | ((op = opJmp)    & transitionJmp(s0, s1))
   | ((op = opCjmp)   & transitionCjmp(s0, s1))
   | ((op = opCnjmp)  & transitionCnjmp(s0, s1))
   | ((op = opStoreb) & transitionStoreb(s0, s1))
   | ((op = opLoadb)  & transitionLoadb(T, t, s0, s1))
   | ((op = opStorew) & transitionStorew(s0, s1))
   | ((op = opLoadw)  & transitionLoadw(T, t, s0, s1))).

def transitions : Trace -> Prop
  := \T : Trace
  => let ss : List^4096(Step) := getSteps(T);
     all i1 : N < length(ss),
     (i1 = 0N)
   | (some i0 : N < length(ss),
      let t : Time := to(Time)(cast(i0));
      ((i0 +N 1N) = i1)
    & transition(T, t, nth(ss, i0), nth(ss, i1))).

def initialConditions : Trace -> Prop
  := \T : Trace
  => let ss : List^4096(Step) := getSteps(T);
     (0N = length(ss))
   | (let s : Step := nth(ss, 0N);
      (getProgramCounter(s) = to(Address)(zero))
    & (getFlag(s) = to(Flag)(false))
    & (all r : Register, getRegisterValue(s, r) = zero)).

def traceIsValid : Trace -> Prop
  := \T : Trace
  => linksAreOrdered(T)
   & doesNotAnswerPrematurely(T)
   & transitions(T)
   & initialConditions(T).

def traceAccepts : Trace -> Prop
  := \t : Trace
  => let ss : List^4096(Step) := getSteps(t);
     some i : N < length(ss),
     ((i +N 1N) = length(ss))
   & (let s : Step := nth(ss, i);
      (getOpcode(getStepInstruction(s)) = opAnswer)
    & (getArg3Value(s) = to(Word)(fin(0)))).

def memoryIsConsistentWithTrace : Memory -> Trace -> Prop
  := \M : Memory => \T : Trace
  => let ss : List^4096(Step) := getSteps(T);
     all i : N < length(ss),
     let s : Step := nth(ss, i);
     let t : Time := to(Time)(cast(i));
     (isFirstStepAccessingGivenAddress(T, t) & isLoad(getStepInstruction(s)))
     -> (getStoredWord(s) = getMemoryValue(M, getAddress(s))).

def programIsConsistentWithTrace : Program -> Trace -> Prop
  := \P : Program => \T : Trace
  => let ss : List^4096(Step) := getSteps(T);
     all i : N < length(ss),
     let t : Time := to(Time)(cast(i));
     let s : Step := nth(ss, i);
     getStepInstruction(s) = getProgramInstruction(P, getProgramCounter(s)).

def programAccepts : InitialState -> Prop
  := \i : InitialState
  => some t : Trace,
     let m : Memory := getMemory(i);
     let p : Program := getProgram(i);
     traceIsValid(t)
   & traceAccepts(t)
   & memoryIsConsistentWithTrace(m, t)
   & programIsConsistentWithTrace(p, t).
